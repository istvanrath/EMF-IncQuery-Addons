package hu.bme.mit.incquery.cep.casestudy.transaction

uses hu.bme.mit.incquery.cep.casestudy.transaction.sources.*
uses hu.bme.mit.incquery.cep.casestudy.transaction.incquery.patterns.sample.*
uses hu.bme.mit.incquery.cep.dsl.examples.actionhandlers.*

AtomicEvent componentA(transactionId : String, timestamp : long, customerId : String){
	source : eventSource
}

AtomicEvent componentB(transactionId : String, timestamp : long){
	source : eventSource
	staticBindings {
//		if(!(transactionId.equalsIgnoreCase("transaction"))){
//			return false;
//		}
		return true;
	}
}

AtomicEvent componentC(transactionId : String, timestamp : long, supplierId : String){
	source : eventSource
}

AtomicEvent dummyEvent2(){
	source : eventSource
}


IQPatternEvent oldCompoundTransactionEvent(X:org.eclipse.emf.ecore.EObject, I:int){
	iqPatternRef : oldCompoundTransaction(X, I)
	iqChangeType : NEW_MATCH_FOUND
}


ComplexEvent compoundTransactionEvent(a:componentA, b:componentB, c:componentC){
	definition : (a(tId, _ts, cId) -> b(tId, _ts) -> c(tId, _ts, sId))[1100]
}

ComplexEvent compoundTransactionEvent1(a:componentA, b:componentB, c:componentC){
	definition : (a -> b)[1500]
}

ComplexEvent compoundTransactionEvent2(a:componentA, b:componentB, c:componentC){
	definition : (a -> b ->c)[1500]
}


RuleOnAppear r1 {
	events: compoundTransactionEvent1, compoundTransactionEvent2
	actionHandler: hu.bme.mit.incquery.cep.casestudy.transaction.handlers.MySimpleActionHandler
//	action {
//		new hu.bme.mit.incquery.cep.casestudy.transaction.handlers.MyActionHandler().handleAction("observed event")
//	}
}