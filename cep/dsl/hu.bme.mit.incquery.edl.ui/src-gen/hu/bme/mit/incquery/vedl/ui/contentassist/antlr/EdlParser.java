/*
* generated by Xtext
*/
package hu.bme.mit.incquery.vedl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import hu.bme.mit.incquery.vedl.services.EdlGrammarAccess;

public class EdlParser extends AbstractContentAssistParser {
	
	@Inject
	private EdlGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected hu.bme.mit.incquery.vedl.ui.contentassist.antlr.internal.InternalEdlParser createParser() {
		hu.bme.mit.incquery.vedl.ui.contentassist.antlr.internal.InternalEdlParser result = new hu.bme.mit.incquery.vedl.ui.contentassist.antlr.internal.InternalEdlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getUsageAccess().getAlternatives(), "rule__Usage__Alternatives");
					put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
					put(grammarAccess.getAbstractAtomicEventAccess().getAlternatives(), "rule__AbstractAtomicEvent__Alternatives");
					put(grammarAccess.getAnnotationsAccess().getAlternatives(), "rule__Annotations__Alternatives");
					put(grammarAccess.getParameterFilterRuleAccess().getAlternatives(), "rule__ParameterFilterRule__Alternatives");
					put(grammarAccess.getRangeAccess().getAlternatives(), "rule__Range__Alternatives");
					put(grammarAccess.getNumericOperatorAccess().getAlternatives(), "rule__NumericOperator__Alternatives");
					put(grammarAccess.getLiteralOperatorAccess().getAlternatives(), "rule__LiteralOperator__Alternatives");
					put(grammarAccess.getFollowsOperatorAccess().getAlternatives(), "rule__FollowsOperator__Alternatives");
					put(grammarAccess.getIQPatternChangeTypeAccess().getAlternatives(), "rule__IQPatternChangeType__Alternatives");
					put(grammarAccess.getContextAccess().getAlternatives(), "rule__Context__Alternatives");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup(), "rule__DOUBLE__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup_1(), "rule__DOUBLE__Group_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getIQUsageAccess().getGroup(), "rule__IQUsage__Group__0");
					put(grammarAccess.getEventSourceUsageAccess().getGroup(), "rule__EventSourceUsage__Group__0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getAtomicEventAccess().getGroup(), "rule__AtomicEvent__Group__0");
					put(grammarAccess.getIQPatternEventAccess().getGroup(), "rule__IQPatternEvent__Group__0");
					put(grammarAccess.getComplexEventAccess().getGroup(), "rule__ComplexEvent__Group__0");
					put(grammarAccess.getCEParamlistAccess().getGroup(), "rule__CEParamlist__Group__0");
					put(grammarAccess.getEventParamWithTypeAccess().getGroup(), "rule__EventParamWithType__Group__0");
					put(grammarAccess.getParameterFilterAccess().getGroup(), "rule__ParameterFilter__Group__0");
					put(grammarAccess.getContextAnnotationAccess().getGroup(), "rule__ContextAnnotation__Group__0");
					put(grammarAccess.getSamplingAnnotationAccess().getGroup(), "rule__SamplingAnnotation__Group__0");
					put(grammarAccess.getPriorityAnnotationAccess().getGroup(), "rule__PriorityAnnotation__Group__0");
					put(grammarAccess.getRangeFilterAccess().getGroup(), "rule__RangeFilter__Group__0");
					put(grammarAccess.getOpenOpenAccess().getGroup(), "rule__OpenOpen__Group__0");
					put(grammarAccess.getOpenClosedAccess().getGroup(), "rule__OpenClosed__Group__0");
					put(grammarAccess.getClosedClosedAccess().getGroup(), "rule__ClosedClosed__Group__0");
					put(grammarAccess.getClosedOpenAccess().getGroup(), "rule__ClosedOpen__Group__0");
					put(grammarAccess.getNumericFilterAccess().getGroup(), "rule__NumericFilter__Group__0");
					put(grammarAccess.getLiteralFilterAccess().getGroup(), "rule__LiteralFilter__Group__0");
					put(grammarAccess.getFollowsExpressionAccess().getGroup(), "rule__FollowsExpression__Group__0");
					put(grammarAccess.getEventWithFollowsOperatorAccess().getGroup(), "rule__EventWithFollowsOperator__Group__0");
					put(grammarAccess.getFollowsOperatorNoTWAccess().getGroup(), "rule__FollowsOperatorNoTW__Group__0");
					put(grammarAccess.getFollowsOperatorViaTWAccess().getGroup(), "rule__FollowsOperatorViaTW__Group__0");
					put(grammarAccess.getEventWithMultiplicityAccess().getGroup(), "rule__EventWithMultiplicity__Group__0");
					put(grammarAccess.getEventWithMultiplicityAccess().getGroup_1(), "rule__EventWithMultiplicity__Group_1__0");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getUsagesAssignment_2(), "rule__PackageDeclaration__UsagesAssignment_2");
					put(grammarAccess.getPackageDeclarationAccess().getModelAssignment_3(), "rule__PackageDeclaration__ModelAssignment_3");
					put(grammarAccess.getIQUsageAccess().getImportedNamespaceAssignment_1(), "rule__IQUsage__ImportedNamespaceAssignment_1");
					put(grammarAccess.getEventSourceUsageAccess().getImportedNamespaceAssignment_1(), "rule__EventSourceUsage__ImportedNamespaceAssignment_1");
					put(grammarAccess.getModelAccess().getAnnotationsAssignment_0(), "rule__Model__AnnotationsAssignment_0");
					put(grammarAccess.getModelAccess().getNameAssignment_2(), "rule__Model__NameAssignment_2");
					put(grammarAccess.getModelAccess().getEventsAssignment_4(), "rule__Model__EventsAssignment_4");
					put(grammarAccess.getAtomicEventAccess().getAnnotationsAssignment_0(), "rule__AtomicEvent__AnnotationsAssignment_0");
					put(grammarAccess.getAtomicEventAccess().getNameAssignment_2(), "rule__AtomicEvent__NameAssignment_2");
					put(grammarAccess.getAtomicEventAccess().getSourceAssignment_7(), "rule__AtomicEvent__SourceAssignment_7");
					put(grammarAccess.getAtomicEventAccess().getIdAssignment_10(), "rule__AtomicEvent__IdAssignment_10");
					put(grammarAccess.getAtomicEventAccess().getParameterFiltersAssignment_13(), "rule__AtomicEvent__ParameterFiltersAssignment_13");
					put(grammarAccess.getIQPatternEventAccess().getNameAssignment_1(), "rule__IQPatternEvent__NameAssignment_1");
					put(grammarAccess.getIQPatternEventAccess().getIqpatternAssignment_6(), "rule__IQPatternEvent__IqpatternAssignment_6");
					put(grammarAccess.getIQPatternEventAccess().getChangeTypeAssignment_9(), "rule__IQPatternEvent__ChangeTypeAssignment_9");
					put(grammarAccess.getComplexEventAccess().getAnnotationsAssignment_0(), "rule__ComplexEvent__AnnotationsAssignment_0");
					put(grammarAccess.getComplexEventAccess().getNameAssignment_2(), "rule__ComplexEvent__NameAssignment_2");
					put(grammarAccess.getComplexEventAccess().getParamlistAssignment_3(), "rule__ComplexEvent__ParamlistAssignment_3");
					put(grammarAccess.getComplexEventAccess().getComplexEventExpressionsAssignment_5(), "rule__ComplexEvent__ComplexEventExpressionsAssignment_5");
					put(grammarAccess.getCEParamlistAccess().getParamsAssignment_2(), "rule__CEParamlist__ParamsAssignment_2");
					put(grammarAccess.getEventParamWithTypeAccess().getNameAssignment_0(), "rule__EventParamWithType__NameAssignment_0");
					put(grammarAccess.getEventParamWithTypeAccess().getTypeAssignment_2(), "rule__EventParamWithType__TypeAssignment_2");
					put(grammarAccess.getParameterFilterAccess().getAttributeNameAssignment_0(), "rule__ParameterFilter__AttributeNameAssignment_0");
					put(grammarAccess.getParameterFilterAccess().getParamFilterRuleAssignment_1(), "rule__ParameterFilter__ParamFilterRuleAssignment_1");
					put(grammarAccess.getIQPatternAccess().getNameAssignment(), "rule__IQPattern__NameAssignment");
					put(grammarAccess.getContextAnnotationAccess().getContextAssignment_2(), "rule__ContextAnnotation__ContextAssignment_2");
					put(grammarAccess.getSamplingAnnotationAccess().getSamplingAssignment_2(), "rule__SamplingAnnotation__SamplingAssignment_2");
					put(grammarAccess.getPriorityAnnotationAccess().getPriorityAssignment_2(), "rule__PriorityAnnotation__PriorityAssignment_2");
					put(grammarAccess.getRangeFilterAccess().getNegAssignment_0(), "rule__RangeFilter__NegAssignment_0");
					put(grammarAccess.getRangeFilterAccess().getRangeAssignment_2(), "rule__RangeFilter__RangeAssignment_2");
					put(grammarAccess.getOpenOpenAccess().getLowerBoundAssignment_1(), "rule__OpenOpen__LowerBoundAssignment_1");
					put(grammarAccess.getOpenOpenAccess().getUpperBoundAssignment_3(), "rule__OpenOpen__UpperBoundAssignment_3");
					put(grammarAccess.getOpenClosedAccess().getLowerBoundAssignment_1(), "rule__OpenClosed__LowerBoundAssignment_1");
					put(grammarAccess.getOpenClosedAccess().getUpperBoundAssignment_3(), "rule__OpenClosed__UpperBoundAssignment_3");
					put(grammarAccess.getClosedClosedAccess().getLowerBoundAssignment_1(), "rule__ClosedClosed__LowerBoundAssignment_1");
					put(grammarAccess.getClosedClosedAccess().getUpperBoundAssignment_3(), "rule__ClosedClosed__UpperBoundAssignment_3");
					put(grammarAccess.getClosedOpenAccess().getLowerBoundAssignment_1(), "rule__ClosedOpen__LowerBoundAssignment_1");
					put(grammarAccess.getClosedOpenAccess().getUpperBoundAssignment_3(), "rule__ClosedOpen__UpperBoundAssignment_3");
					put(grammarAccess.getNumericFilterAccess().getOperatorAssignment_0(), "rule__NumericFilter__OperatorAssignment_0");
					put(grammarAccess.getNumericFilterAccess().getValueAssignment_1(), "rule__NumericFilter__ValueAssignment_1");
					put(grammarAccess.getLiteralFilterAccess().getNegAssignment_0(), "rule__LiteralFilter__NegAssignment_0");
					put(grammarAccess.getLiteralFilterAccess().getOperatorAssignment_1(), "rule__LiteralFilter__OperatorAssignment_1");
					put(grammarAccess.getLiteralFilterAccess().getValueAssignment_2(), "rule__LiteralFilter__ValueAssignment_2");
					put(grammarAccess.getFollowsExpressionAccess().getFirstEventAssignment_0(), "rule__FollowsExpression__FirstEventAssignment_0");
					put(grammarAccess.getFollowsExpressionAccess().getEventsAssignment_1(), "rule__FollowsExpression__EventsAssignment_1");
					put(grammarAccess.getEventWithFollowsOperatorAccess().getOperatorAssignment_0(), "rule__EventWithFollowsOperator__OperatorAssignment_0");
					put(grammarAccess.getEventWithFollowsOperatorAccess().getEventAssignment_1(), "rule__EventWithFollowsOperator__EventAssignment_1");
					put(grammarAccess.getFollowsOperatorViaTWAccess().getTimewindowAssignment_1(), "rule__FollowsOperatorViaTW__TimewindowAssignment_1");
					put(grammarAccess.getEventWithMultiplicityAccess().getEventAssignment_0(), "rule__EventWithMultiplicity__EventAssignment_0");
					put(grammarAccess.getEventWithMultiplicityAccess().getMultiplicityAssignment_1_1(), "rule__EventWithMultiplicity__MultiplicityAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			hu.bme.mit.incquery.vedl.ui.contentassist.antlr.internal.InternalEdlParser typedParser = (hu.bme.mit.incquery.vedl.ui.contentassist.antlr.internal.InternalEdlParser) parser;
			typedParser.entryRulePackageDeclaration();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EdlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EdlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
