/*
* generated by Xtext
*/
package hu.bme.mit.incquery.cep.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EventPatternLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EventModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPackageNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cPackageNameAssignment_0_1.eContents().get(0);
		private final Assignment cUsagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUsagesUsageParserRuleCall_1_0 = (RuleCall)cUsagesAssignment_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		private final Keyword cEventModelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEventsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEventsEventModelElementsParserRuleCall_6_0 = (RuleCall)cEventsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EventModel hidden(WS, ML_COMMENT, SL_COMMENT):
		//
		//	("package" packageName=QualifiedName)? usages+=Usage* annotations+=Annotations* "EventModel" name=ID "{"
		//
		//	events+=EventModelElements* "}";
		public ParserRule getRule() { return rule; }

		//("package" packageName=QualifiedName)? usages+=Usage* annotations+=Annotations* "EventModel" name=ID "{"
		//
		//events+=EventModelElements* "}"
		public Group getGroup() { return cGroup; }

		//("package" packageName=QualifiedName)?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_0_1() { return cPackageNameAssignment_0_1; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_0_1_0() { return cPackageNameQualifiedNameParserRuleCall_0_1_0; }

		//usages+=Usage*
		public Assignment getUsagesAssignment_1() { return cUsagesAssignment_1; }

		//Usage
		public RuleCall getUsagesUsageParserRuleCall_1_0() { return cUsagesUsageParserRuleCall_1_0; }

		//annotations+=Annotations*
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_2_0() { return cAnnotationsAnnotationsParserRuleCall_2_0; }

		//"EventModel"
		public Keyword getEventModelKeyword_3() { return cEventModelKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//events+=EventModelElements*
		public Assignment getEventsAssignment_6() { return cEventsAssignment_6; }

		//EventModelElements
		public RuleCall getEventsEventModelElementsParserRuleCall_6_0() { return cEventsEventModelElementsParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//DOUBLE returns ecore::EDouble:
		//
		//	"-"? INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class UsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Usage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIQUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventSourceUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////QualifiedName:
		//
		////	ID ('.' ID)*;
		//
		////
		//
		////QualifiedNameWithWildcard:
		//
		////	QualifiedName '.*'?;
		//
		//Usage:
		//
		//	IQUsage | EventSourceUsage;
		public ParserRule getRule() { return rule; }

		//IQUsage | EventSourceUsage
		public Alternatives getAlternatives() { return cAlternatives; }

		//IQUsage
		public RuleCall getIQUsageParserRuleCall_0() { return cIQUsageParserRuleCall_0; }

		//EventSourceUsage
		public RuleCall getEventSourceUsageParserRuleCall_1() { return cEventSourceUsageParserRuleCall_1; }
	}

	public class IQUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesIncqueryPatternsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//IQUsage:
		//
		//	"uses-incquery-patterns" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"uses-incquery-patterns" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"uses-incquery-patterns"
		public Keyword getUsesIncqueryPatternsKeyword_0() { return cUsesIncqueryPatternsKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class EventSourceUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventSourceUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesEventsourcesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//EventSourceUsage:
		//
		//	"uses-eventsources" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"uses-eventsources" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"uses-eventsources"
		public Keyword getUsesEventsourcesKeyword_0() { return cUsesEventsourcesKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class EventModelElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventModelElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EventModelElements:
		//
		//	Event | Source;
		public ParserRule getRule() { return rule; }

		//Event | Source
		public Alternatives getAlternatives() { return cAlternatives; }

		//Event
		public RuleCall getEventParserRuleCall_0() { return cEventParserRuleCall_0; }

		//Source
		public RuleCall getSourceParserRuleCall_1() { return cSourceParserRuleCall_1; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractAtomicEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Event:
		//
		//	AbstractAtomicEvent | ComplexEvent;
		public ParserRule getRule() { return rule; }

		//AbstractAtomicEvent | ComplexEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractAtomicEvent
		public RuleCall getAbstractAtomicEventParserRuleCall_0() { return cAbstractAtomicEventParserRuleCall_0; }

		//ComplexEvent
		public RuleCall getComplexEventParserRuleCall_1() { return cComplexEventParserRuleCall_1; }
	}

	public class AbstractAtomicEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractAtomicEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIQPatternEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractAtomicEvent:
		//
		//	AtomicEvent | IQPatternEvent;
		public ParserRule getRule() { return rule; }

		//AtomicEvent | IQPatternEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtomicEvent
		public RuleCall getAtomicEventParserRuleCall_0() { return cAtomicEventParserRuleCall_0; }

		//IQPatternEvent
		public RuleCall getIQPatternEventParserRuleCall_1() { return cIQPatternEventParserRuleCall_1; }
	}

	public class AtomicEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cAtomicEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIdKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIdAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIdSTRINGTerminalRuleCall_7_0 = (RuleCall)cIdAssignment_7.eContents().get(0);
		private final Keyword cSourceKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSourceAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cSourceSourceCrossReference_10_0 = (CrossReference)cSourceAssignment_10.eContents().get(0);
		private final RuleCall cSourceSourceIDTerminalRuleCall_10_0_1 = (RuleCall)cSourceSourceCrossReference_10_0.eContents().get(1);
		private final Keyword cParameterFiltersKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cParameterFiltersAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cParameterFiltersParameterFilterParserRuleCall_13_0 = (RuleCall)cParameterFiltersAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//AtomicEvent:
		//
		//	annotations+=Annotations* "AtomicEvent" name=ID "()" "{" "id" ":" id=STRING "source" ":" source=[Source]
		//
		//	"parameterFilters" "{" parameterFilters+=ParameterFilter+ "}" "}";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotations* "AtomicEvent" name=ID "()" "{" "id" ":" id=STRING "source" ":" source=[Source]
		//
		//"parameterFilters" "{" parameterFilters+=ParameterFilter+ "}" "}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotations*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_0_0() { return cAnnotationsAnnotationsParserRuleCall_0_0; }

		//"AtomicEvent"
		public Keyword getAtomicEventKeyword_1() { return cAtomicEventKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_3() { return cLeftParenthesisRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"id"
		public Keyword getIdKeyword_5() { return cIdKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//id=STRING
		public Assignment getIdAssignment_7() { return cIdAssignment_7; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_7_0() { return cIdSTRINGTerminalRuleCall_7_0; }

		//"source"
		public Keyword getSourceKeyword_8() { return cSourceKeyword_8; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//source=[Source]
		public Assignment getSourceAssignment_10() { return cSourceAssignment_10; }

		//[Source]
		public CrossReference getSourceSourceCrossReference_10_0() { return cSourceSourceCrossReference_10_0; }

		//ID
		public RuleCall getSourceSourceIDTerminalRuleCall_10_0_1() { return cSourceSourceIDTerminalRuleCall_10_0_1; }

		//"parameterFilters"
		public Keyword getParameterFiltersKeyword_11() { return cParameterFiltersKeyword_11; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_12() { return cLeftCurlyBracketKeyword_12; }

		//parameterFilters+=ParameterFilter+
		public Assignment getParameterFiltersAssignment_13() { return cParameterFiltersAssignment_13; }

		//ParameterFilter
		public RuleCall getParameterFiltersParameterFilterParserRuleCall_13_0() { return cParameterFiltersParameterFilterParserRuleCall_13_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}

	public class IQPatternEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQPatternEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIQPatternEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIQPatternRefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIqpatternAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIqpatternSTRINGTerminalRuleCall_6_0 = (RuleCall)cIqpatternAssignment_6.eContents().get(0);
		private final Keyword cChangeTypeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cChangeTypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cChangeTypeIQPatternChangeTypeEnumRuleCall_9_0 = (RuleCall)cChangeTypeAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//IQPatternEvent:
		//
		//	"IQPatternEvent" name=ID "()" "{" "IQPatternRef" ":" iqpattern= //[iqpl::Pattern]
		//
		//	STRING "ChangeType" ":" changeType=IQPatternChangeType "}";
		public ParserRule getRule() { return rule; }

		//"IQPatternEvent" name=ID "()" "{" "IQPatternRef" ":" iqpattern= //[iqpl::Pattern]
		//
		//STRING "ChangeType" ":" changeType=IQPatternChangeType "}"
		public Group getGroup() { return cGroup; }

		//"IQPatternEvent"
		public Keyword getIQPatternEventKeyword_0() { return cIQPatternEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"IQPatternRef"
		public Keyword getIQPatternRefKeyword_4() { return cIQPatternRefKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//iqpattern= //[iqpl::Pattern]
		//
		//STRING
		public Assignment getIqpatternAssignment_6() { return cIqpatternAssignment_6; }

		////[iqpl::Pattern]
		//
		//STRING
		public RuleCall getIqpatternSTRINGTerminalRuleCall_6_0() { return cIqpatternSTRINGTerminalRuleCall_6_0; }

		//"ChangeType"
		public Keyword getChangeTypeKeyword_7() { return cChangeTypeKeyword_7; }

		//":"
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }

		//changeType=IQPatternChangeType
		public Assignment getChangeTypeAssignment_9() { return cChangeTypeAssignment_9; }

		//IQPatternChangeType
		public RuleCall getChangeTypeIQPatternChangeTypeEnumRuleCall_9_0() { return cChangeTypeIQPatternChangeTypeEnumRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ComplexEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cComplexEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cParamlistAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamlistCEParamlistParserRuleCall_3_0 = (RuleCall)cParamlistAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComplexEventExpressionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComplexEventExpressionsComplexEventExpressionParserRuleCall_5_0 = (RuleCall)cComplexEventExpressionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ComplexEvent:
		//
		//	annotations+=Annotations* "ComplexEvent" name=ID paramlist=CEParamlist "{"
		//
		//	complexEventExpressions+=ComplexEventExpression* "}";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotations* "ComplexEvent" name=ID paramlist=CEParamlist "{"
		//
		//complexEventExpressions+=ComplexEventExpression* "}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotations*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_0_0() { return cAnnotationsAnnotationsParserRuleCall_0_0; }

		//"ComplexEvent"
		public Keyword getComplexEventKeyword_1() { return cComplexEventKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//paramlist=CEParamlist
		public Assignment getParamlistAssignment_3() { return cParamlistAssignment_3; }

		//CEParamlist
		public RuleCall getParamlistCEParamlistParserRuleCall_3_0() { return cParamlistCEParamlistParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//complexEventExpressions+=ComplexEventExpression*
		public Assignment getComplexEventExpressionsAssignment_5() { return cComplexEventExpressionsAssignment_5; }

		//ComplexEventExpression
		public RuleCall getComplexEventExpressionsComplexEventExpressionParserRuleCall_5_0() { return cComplexEventExpressionsComplexEventExpressionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class CEParamlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CEParamlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCEParamlistAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsEventParamWithTypeParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CEParamlist:
		//
		//	{CEParamlist} "(" params+=EventParamWithType* ")";
		public ParserRule getRule() { return rule; }

		//{CEParamlist} "(" params+=EventParamWithType* ")"
		public Group getGroup() { return cGroup; }

		//{CEParamlist}
		public Action getCEParamlistAction_0() { return cCEParamlistAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//params+=EventParamWithType*
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//EventParamWithType
		public RuleCall getParamsEventParamWithTypeParserRuleCall_2_0() { return cParamsEventParamWithTypeParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class EventParamWithTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventParamWithType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEventCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEventIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEventCrossReference_2_0.eContents().get(1);
		
		//EventParamWithType:
		//
		//	name=ID ":" type=[Event];
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=[Event]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=[Event]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Event]
		public CrossReference getTypeEventCrossReference_2_0() { return cTypeEventCrossReference_2_0; }

		//ID
		public RuleCall getTypeEventIDTerminalRuleCall_2_0_1() { return cTypeEventIDTerminalRuleCall_2_0_1; }
	}

	public class ParameterFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeNameIDTerminalRuleCall_0_0 = (RuleCall)cAttributeNameAssignment_0.eContents().get(0);
		private final Assignment cParamFilterRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamFilterRuleParameterFilterRuleParserRuleCall_1_0 = (RuleCall)cParamFilterRuleAssignment_1.eContents().get(0);
		
		//ParameterFilter:
		//
		//	attributeName=ID paramFilterRule=ParameterFilterRule;
		public ParserRule getRule() { return rule; }

		//attributeName=ID paramFilterRule=ParameterFilterRule
		public Group getGroup() { return cGroup; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_0() { return cAttributeNameAssignment_0; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_0_0() { return cAttributeNameIDTerminalRuleCall_0_0; }

		//paramFilterRule=ParameterFilterRule
		public Assignment getParamFilterRuleAssignment_1() { return cParamFilterRuleAssignment_1; }

		//ParameterFilterRule
		public RuleCall getParamFilterRuleParameterFilterRuleParserRuleCall_1_0() { return cParamFilterRuleParameterFilterRuleParserRuleCall_1_0; }
	}

	public class AnnotationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContextAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSamplingAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPriorityAnnotationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Annotations:
		//
		//	ContextAnnotation | SamplingAnnotation | PriorityAnnotation;
		public ParserRule getRule() { return rule; }

		//ContextAnnotation | SamplingAnnotation | PriorityAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContextAnnotation
		public RuleCall getContextAnnotationParserRuleCall_0() { return cContextAnnotationParserRuleCall_0; }

		//SamplingAnnotation
		public RuleCall getSamplingAnnotationParserRuleCall_1() { return cSamplingAnnotationParserRuleCall_1; }

		//PriorityAnnotation
		public RuleCall getPriorityAnnotationParserRuleCall_2() { return cPriorityAnnotationParserRuleCall_2; }
	}

	public class ContextAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextContextEnumRuleCall_2_0 = (RuleCall)cContextAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContextAnnotation:
		//
		//	"@Context" "(" context=Context ")";
		public ParserRule getRule() { return rule; }

		//"@Context" "(" context=Context ")"
		public Group getGroup() { return cGroup; }

		//"@Context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//context=Context
		public Assignment getContextAssignment_2() { return cContextAssignment_2; }

		//Context
		public RuleCall getContextContextEnumRuleCall_2_0() { return cContextContextEnumRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SamplingAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SamplingAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSamplingTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSamplingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSamplingINTTerminalRuleCall_2_0 = (RuleCall)cSamplingAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SamplingAnnotation:
		//
		//	"@SamplingTime" "(" sampling=INT ")";
		public ParserRule getRule() { return rule; }

		//"@SamplingTime" "(" sampling=INT ")"
		public Group getGroup() { return cGroup; }

		//"@SamplingTime"
		public Keyword getSamplingTimeKeyword_0() { return cSamplingTimeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//sampling=INT
		public Assignment getSamplingAssignment_2() { return cSamplingAssignment_2; }

		//INT
		public RuleCall getSamplingINTTerminalRuleCall_2_0() { return cSamplingINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PriorityAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PriorityAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPriorityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPriorityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriorityINTTerminalRuleCall_2_0 = (RuleCall)cPriorityAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PriorityAnnotation:
		//
		//	"@Priority" "(" priority=INT ")";
		public ParserRule getRule() { return rule; }

		//"@Priority" "(" priority=INT ")"
		public Group getGroup() { return cGroup; }

		//"@Priority"
		public Keyword getPriorityKeyword_0() { return cPriorityKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//priority=INT
		public Assignment getPriorityAssignment_2() { return cPriorityAssignment_2; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_2_0() { return cPriorityINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ParameterFilterRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterFilterRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericFilterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParameterFilterRule:
		//
		//	RangeFilter | NumericFilter | LiteralFilter;
		public ParserRule getRule() { return rule; }

		//RangeFilter | NumericFilter | LiteralFilter
		public Alternatives getAlternatives() { return cAlternatives; }

		//RangeFilter
		public RuleCall getRangeFilterParserRuleCall_0() { return cRangeFilterParserRuleCall_0; }

		//NumericFilter
		public RuleCall getNumericFilterParserRuleCall_1() { return cNumericFilterParserRuleCall_1; }

		//LiteralFilter
		public RuleCall getLiteralFilterParserRuleCall_2() { return cLiteralFilterParserRuleCall_2; }
	}

	public class RangeFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegNegationOpartorParserRuleCall_0_0 = (RuleCall)cNegAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		
		//RangeFilter:
		//
		//	neg=NegationOpartor? "in" range=Range;
		public ParserRule getRule() { return rule; }

		//neg=NegationOpartor? "in" range=Range
		public Group getGroup() { return cGroup; }

		//neg=NegationOpartor?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }

		//NegationOpartor
		public RuleCall getNegNegationOpartorParserRuleCall_0_0() { return cNegNegationOpartorParserRuleCall_0_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//range=Range
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0() { return cRangeRangeParserRuleCall_2_0; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenOpenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOpenClosedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClosedClosedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClosedOpenParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Range:
		//
		//	OpenOpen | OpenClosed | ClosedClosed | ClosedOpen;
		public ParserRule getRule() { return rule; }

		//OpenOpen | OpenClosed | ClosedClosed | ClosedOpen
		public Alternatives getAlternatives() { return cAlternatives; }

		//OpenOpen
		public RuleCall getOpenOpenParserRuleCall_0() { return cOpenOpenParserRuleCall_0; }

		//OpenClosed
		public RuleCall getOpenClosedParserRuleCall_1() { return cOpenClosedParserRuleCall_1; }

		//ClosedClosed
		public RuleCall getClosedClosedParserRuleCall_2() { return cClosedClosedParserRuleCall_2; }

		//ClosedOpen
		public RuleCall getClosedOpenParserRuleCall_3() { return cClosedOpenParserRuleCall_3; }
	}

	public class OpenOpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenOpen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpenOpen:
		//
		//	"(" lowerBound=DOUBLE "," upperBound=DOUBLE ")";
		public ParserRule getRule() { return rule; }

		//"(" lowerBound=DOUBLE "," upperBound=DOUBLE ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class OpenClosedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenClosed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpenClosed:
		//
		//	"(" lowerBound=DOUBLE "," upperBound=DOUBLE "]";
		public ParserRule getRule() { return rule; }

		//"(" lowerBound=DOUBLE "," upperBound=DOUBLE "]"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ClosedClosedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosedClosed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClosedClosed:
		//
		//	"[" lowerBound=DOUBLE "," upperBound=DOUBLE ")";
		public ParserRule getRule() { return rule; }

		//"[" lowerBound=DOUBLE "," upperBound=DOUBLE ")"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ClosedOpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosedOpen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClosedOpen:
		//
		//	"[" lowerBound=DOUBLE "," upperBound=DOUBLE "]";
		public ParserRule getRule() { return rule; }

		//"[" lowerBound=DOUBLE "," upperBound=DOUBLE "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class NumericFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorNumericOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDOUBLEParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumericFilter:
		//
		//	operator=NumericOperator value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//operator=NumericOperator value=DOUBLE
		public Group getGroup() { return cGroup; }

		//operator=NumericOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//NumericOperator
		public RuleCall getOperatorNumericOperatorParserRuleCall_0_0() { return cOperatorNumericOperatorParserRuleCall_0_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_1_0() { return cValueDOUBLEParserRuleCall_1_0; }
	}

	public class NumericOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//NumericOperator:
		//
		//	"<" | "=<" | "==" | "!=" | ">=" | ">";
		public ParserRule getRule() { return rule; }

		//"<" | "=<" | "==" | "!=" | ">=" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"=<"
		public Keyword getEqualsSignLessThanSignKeyword_1() { return cEqualsSignLessThanSignKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_3() { return cExclamationMarkEqualsSignKeyword_3; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}

	public class LiteralFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegNegationOpartorParserRuleCall_0_0 = (RuleCall)cNegAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorLiteralOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//LiteralFilter:
		//
		//	neg=NegationOpartor? operator=LiteralOperator value=STRING;
		public ParserRule getRule() { return rule; }

		//neg=NegationOpartor? operator=LiteralOperator value=STRING
		public Group getGroup() { return cGroup; }

		//neg=NegationOpartor?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }

		//NegationOpartor
		public RuleCall getNegNegationOpartorParserRuleCall_0_0() { return cNegNegationOpartorParserRuleCall_0_0; }

		//operator=LiteralOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//LiteralOperator
		public RuleCall getOperatorLiteralOperatorParserRuleCall_1_0() { return cOperatorLiteralOperatorParserRuleCall_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class LiteralOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStartsWithKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEndsWithKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//LiteralOperator:
		//
		//	"contains" | "startsWith" | "endsWith";
		public ParserRule getRule() { return rule; }

		//"contains" | "startsWith" | "endsWith"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"contains"
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }

		//"startsWith"
		public Keyword getStartsWithKeyword_1() { return cStartsWithKeyword_1; }

		//"endsWith"
		public Keyword getEndsWithKeyword_2() { return cEndsWithKeyword_2; }
	}

	public class NegationOpartorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegationOpartor");
		private final Keyword cNotKeyword = (Keyword)rule.eContents().get(1);
		
		//NegationOpartor:
		//
		//	"not";
		public ParserRule getRule() { return rule; }

		//"not"
		public Keyword getNotKeyword() { return cNotKeyword; }
	}

	public class ComplexEventExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexEventExpression");
		private final RuleCall cFollowsExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ComplexEventExpression: //| ConcurrentExpression
		//
		//	FollowsExpression;
		public ParserRule getRule() { return rule; }

		////| ConcurrentExpression
		//
		//FollowsExpression
		public RuleCall getFollowsExpressionParserRuleCall() { return cFollowsExpressionParserRuleCall; }
	}

	public class FollowsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstEventEventWithMultiplicityParserRuleCall_0_0 = (RuleCall)cFirstEventAssignment_0.eContents().get(0);
		private final Assignment cEventsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventsEventWithFollowsOperatorParserRuleCall_1_0 = (RuleCall)cEventsAssignment_1.eContents().get(0);
		
		//FollowsExpression:
		//
		//	firstEvent+=EventWithMultiplicity events+=EventWithFollowsOperator*;
		public ParserRule getRule() { return rule; }

		//firstEvent+=EventWithMultiplicity events+=EventWithFollowsOperator*
		public Group getGroup() { return cGroup; }

		//firstEvent+=EventWithMultiplicity
		public Assignment getFirstEventAssignment_0() { return cFirstEventAssignment_0; }

		//EventWithMultiplicity
		public RuleCall getFirstEventEventWithMultiplicityParserRuleCall_0_0() { return cFirstEventEventWithMultiplicityParserRuleCall_0_0; }

		//events+=EventWithFollowsOperator*
		public Assignment getEventsAssignment_1() { return cEventsAssignment_1; }

		//EventWithFollowsOperator
		public RuleCall getEventsEventWithFollowsOperatorParserRuleCall_1_0() { return cEventsEventWithFollowsOperatorParserRuleCall_1_0; }
	}

	public class EventWithFollowsOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventWithFollowsOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorFollowsOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventEventWithMultiplicityParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		
		//EventWithFollowsOperator:
		//
		//	operator=FollowsOperator event=EventWithMultiplicity;
		public ParserRule getRule() { return rule; }

		//operator=FollowsOperator event=EventWithMultiplicity
		public Group getGroup() { return cGroup; }

		//operator=FollowsOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//FollowsOperator
		public RuleCall getOperatorFollowsOperatorParserRuleCall_0_0() { return cOperatorFollowsOperatorParserRuleCall_0_0; }

		//event=EventWithMultiplicity
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//EventWithMultiplicity
		public RuleCall getEventEventWithMultiplicityParserRuleCall_1_0() { return cEventEventWithMultiplicityParserRuleCall_1_0; }
	}

	public class FollowsOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowsOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFollowsOperatorNoTWParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFollowsOperatorViaTWParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FollowsOperator:
		//
		//	FollowsOperatorNoTW | FollowsOperatorViaTW;
		public ParserRule getRule() { return rule; }

		//FollowsOperatorNoTW | FollowsOperatorViaTW
		public Alternatives getAlternatives() { return cAlternatives; }

		//FollowsOperatorNoTW
		public RuleCall getFollowsOperatorNoTWParserRuleCall_0() { return cFollowsOperatorNoTWParserRuleCall_0; }

		//FollowsOperatorViaTW
		public RuleCall getFollowsOperatorViaTWParserRuleCall_1() { return cFollowsOperatorViaTWParserRuleCall_1; }
	}

	public class FollowsOperatorNoTWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowsOperatorNoTW");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFollowsOperatorNoTWAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FollowsOperatorNoTW:
		//
		//	{FollowsOperatorNoTW} "->";
		public ParserRule getRule() { return rule; }

		//{FollowsOperatorNoTW} "->"
		public Group getGroup() { return cGroup; }

		//{FollowsOperatorNoTW}
		public Action getFollowsOperatorNoTWAction_0() { return cFollowsOperatorNoTWAction_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
	}

	public class FollowsOperatorViaTWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowsOperatorViaTW");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimewindowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimewindowINTTerminalRuleCall_1_0 = (RuleCall)cTimewindowAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FollowsOperatorViaTW:
		//
		//	"-[" timewindow=INT "]->";
		public ParserRule getRule() { return rule; }

		//"-[" timewindow=INT "]->"
		public Group getGroup() { return cGroup; }

		//"-["
		public Keyword getHyphenMinusLeftSquareBracketKeyword_0() { return cHyphenMinusLeftSquareBracketKeyword_0; }

		//timewindow=INT
		public Assignment getTimewindowAssignment_1() { return cTimewindowAssignment_1; }

		//INT
		public RuleCall getTimewindowINTTerminalRuleCall_1_0() { return cTimewindowINTTerminalRuleCall_1_0; }

		//"]->"
		public Keyword getRightSquareBracketHyphenMinusGreaterThanSignKeyword_2() { return cRightSquareBracketHyphenMinusGreaterThanSignKeyword_2; }
	}

	public class EventWithMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventWithMultiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventParamWithTypeCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventParamWithTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventParamWithTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplicityINTTerminalRuleCall_1_1_0 = (RuleCall)cMultiplicityAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//EventWithMultiplicity:
		//
		//	event=[EventParamWithType] ("{" multiplicity=INT "}")?;
		public ParserRule getRule() { return rule; }

		//event=[EventParamWithType] ("{" multiplicity=INT "}")?
		public Group getGroup() { return cGroup; }

		//event=[EventParamWithType]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//[EventParamWithType]
		public CrossReference getEventEventParamWithTypeCrossReference_0_0() { return cEventEventParamWithTypeCrossReference_0_0; }

		//ID
		public RuleCall getEventEventParamWithTypeIDTerminalRuleCall_0_0_1() { return cEventEventParamWithTypeIDTerminalRuleCall_0_0_1; }

		//("{" multiplicity=INT "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//multiplicity=INT
		public Assignment getMultiplicityAssignment_1_1() { return cMultiplicityAssignment_1_1; }

		//INT
		public RuleCall getMultiplicityINTTerminalRuleCall_1_1_0() { return cMultiplicityINTTerminalRuleCall_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRegisterKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAdapterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAdapterAdapterParserRuleCall_3_1_0 = (RuleCall)cAdapterAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Source:
		//
		//	"source" name=ID "{" ("register" adapter+=Adapter)+ "}";
		public ParserRule getRule() { return rule; }

		//"source" name=ID "{" ("register" adapter+=Adapter)+ "}"
		public Group getGroup() { return cGroup; }

		//"source"
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("register" adapter+=Adapter)+
		public Group getGroup_3() { return cGroup_3; }

		//"register"
		public Keyword getRegisterKeyword_3_0() { return cRegisterKeyword_3_0; }

		//adapter+=Adapter
		public Assignment getAdapterAssignment_3_1() { return cAdapterAssignment_3_1; }

		//Adapter
		public RuleCall getAdapterAdapterParserRuleCall_3_1_0() { return cAdapterAdapterParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AdapterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Adapter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Adapter:
		//
		//	name=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	
	
	public class IQPatternChangeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "IQPatternChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFOUNDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFOUNDFOUNDKeyword_0_0 = (Keyword)cFOUNDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOSTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOSTLOSTKeyword_1_0 = (Keyword)cLOSTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IQPatternChangeType:
		//
		//	FOUND | LOST;
		public EnumRule getRule() { return rule; }

		//FOUND | LOST
		public Alternatives getAlternatives() { return cAlternatives; }

		//FOUND
		public EnumLiteralDeclaration getFOUNDEnumLiteralDeclaration_0() { return cFOUNDEnumLiteralDeclaration_0; }

		//"FOUND"
		public Keyword getFOUNDFOUNDKeyword_0_0() { return cFOUNDFOUNDKeyword_0_0; }

		//LOST
		public EnumLiteralDeclaration getLOSTEnumLiteralDeclaration_1() { return cLOSTEnumLiteralDeclaration_1; }

		//"LOST"
		public Keyword getLOSTLOSTKeyword_1_0() { return cLOSTLOSTKeyword_1_0; }
	}

	public class ContextElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cChronicleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cChronicleChronicleKeyword_0_0 = (Keyword)cChronicleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRecentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRecentRecentKeyword_1_0 = (Keyword)cRecentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUnrestrictedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUnrestrictedUnrestrictedKeyword_2_0 = (Keyword)cUnrestrictedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Context:
		//
		//	Chronicle | Recent | Unrestricted;
		public EnumRule getRule() { return rule; }

		//Chronicle | Recent | Unrestricted
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chronicle
		public EnumLiteralDeclaration getChronicleEnumLiteralDeclaration_0() { return cChronicleEnumLiteralDeclaration_0; }

		//"Chronicle"
		public Keyword getChronicleChronicleKeyword_0_0() { return cChronicleChronicleKeyword_0_0; }

		//Recent
		public EnumLiteralDeclaration getRecentEnumLiteralDeclaration_1() { return cRecentEnumLiteralDeclaration_1; }

		//"Recent"
		public Keyword getRecentRecentKeyword_1_0() { return cRecentRecentKeyword_1_0; }

		//Unrestricted
		public EnumLiteralDeclaration getUnrestrictedEnumLiteralDeclaration_2() { return cUnrestrictedEnumLiteralDeclaration_2; }

		//"Unrestricted"
		public Keyword getUnrestrictedUnrestrictedKeyword_2_0() { return cUnrestrictedUnrestrictedKeyword_2_0; }
	}
	
	private EventModelElements pEventModel;
	private DOUBLEElements pDOUBLE;
	private UsageElements pUsage;
	private IQUsageElements pIQUsage;
	private EventSourceUsageElements pEventSourceUsage;
	private EventModelElementsElements pEventModelElements;
	private EventElements pEvent;
	private AbstractAtomicEventElements pAbstractAtomicEvent;
	private AtomicEventElements pAtomicEvent;
	private IQPatternEventElements pIQPatternEvent;
	private ComplexEventElements pComplexEvent;
	private CEParamlistElements pCEParamlist;
	private EventParamWithTypeElements pEventParamWithType;
	private ParameterFilterElements pParameterFilter;
	private IQPatternChangeTypeElements unknownRuleIQPatternChangeType;
	private AnnotationsElements pAnnotations;
	private ContextAnnotationElements pContextAnnotation;
	private ContextElements unknownRuleContext;
	private SamplingAnnotationElements pSamplingAnnotation;
	private PriorityAnnotationElements pPriorityAnnotation;
	private ParameterFilterRuleElements pParameterFilterRule;
	private RangeFilterElements pRangeFilter;
	private RangeElements pRange;
	private OpenOpenElements pOpenOpen;
	private OpenClosedElements pOpenClosed;
	private ClosedClosedElements pClosedClosed;
	private ClosedOpenElements pClosedOpen;
	private NumericFilterElements pNumericFilter;
	private NumericOperatorElements pNumericOperator;
	private LiteralFilterElements pLiteralFilter;
	private LiteralOperatorElements pLiteralOperator;
	private NegationOpartorElements pNegationOpartor;
	private ComplexEventExpressionElements pComplexEventExpression;
	private FollowsExpressionElements pFollowsExpression;
	private EventWithFollowsOperatorElements pEventWithFollowsOperator;
	private FollowsOperatorElements pFollowsOperator;
	private FollowsOperatorNoTWElements pFollowsOperatorNoTW;
	private FollowsOperatorViaTWElements pFollowsOperatorViaTW;
	private EventWithMultiplicityElements pEventWithMultiplicity;
	private SourceElements pSource;
	private AdapterElements pAdapter;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public EventPatternLanguageGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.incquery.cep.dsl.EventPatternLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//EventModel hidden(WS, ML_COMMENT, SL_COMMENT):
	//
	//	("package" packageName=QualifiedName)? usages+=Usage* annotations+=Annotations* "EventModel" name=ID "{"
	//
	//	events+=EventModelElements* "}";
	public EventModelElements getEventModelAccess() {
		return (pEventModel != null) ? pEventModel : (pEventModel = new EventModelElements());
	}
	
	public ParserRule getEventModelRule() {
		return getEventModelAccess().getRule();
	}

	//DOUBLE returns ecore::EDouble:
	//
	//	"-"? INT ("." INT)?;
	public DOUBLEElements getDOUBLEAccess() {
		return (pDOUBLE != null) ? pDOUBLE : (pDOUBLE = new DOUBLEElements());
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	////QualifiedName:
	//
	////	ID ('.' ID)*;
	//
	////
	//
	////QualifiedNameWithWildcard:
	//
	////	QualifiedName '.*'?;
	//
	//Usage:
	//
	//	IQUsage | EventSourceUsage;
	public UsageElements getUsageAccess() {
		return (pUsage != null) ? pUsage : (pUsage = new UsageElements());
	}
	
	public ParserRule getUsageRule() {
		return getUsageAccess().getRule();
	}

	//IQUsage:
	//
	//	"uses-incquery-patterns" importedNamespace=QualifiedNameWithWildcard;
	public IQUsageElements getIQUsageAccess() {
		return (pIQUsage != null) ? pIQUsage : (pIQUsage = new IQUsageElements());
	}
	
	public ParserRule getIQUsageRule() {
		return getIQUsageAccess().getRule();
	}

	//EventSourceUsage:
	//
	//	"uses-eventsources" importedNamespace=QualifiedNameWithWildcard;
	public EventSourceUsageElements getEventSourceUsageAccess() {
		return (pEventSourceUsage != null) ? pEventSourceUsage : (pEventSourceUsage = new EventSourceUsageElements());
	}
	
	public ParserRule getEventSourceUsageRule() {
		return getEventSourceUsageAccess().getRule();
	}

	//EventModelElements:
	//
	//	Event | Source;
	public EventModelElementsElements getEventModelElementsAccess() {
		return (pEventModelElements != null) ? pEventModelElements : (pEventModelElements = new EventModelElementsElements());
	}
	
	public ParserRule getEventModelElementsRule() {
		return getEventModelElementsAccess().getRule();
	}

	//Event:
	//
	//	AbstractAtomicEvent | ComplexEvent;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//AbstractAtomicEvent:
	//
	//	AtomicEvent | IQPatternEvent;
	public AbstractAtomicEventElements getAbstractAtomicEventAccess() {
		return (pAbstractAtomicEvent != null) ? pAbstractAtomicEvent : (pAbstractAtomicEvent = new AbstractAtomicEventElements());
	}
	
	public ParserRule getAbstractAtomicEventRule() {
		return getAbstractAtomicEventAccess().getRule();
	}

	//AtomicEvent:
	//
	//	annotations+=Annotations* "AtomicEvent" name=ID "()" "{" "id" ":" id=STRING "source" ":" source=[Source]
	//
	//	"parameterFilters" "{" parameterFilters+=ParameterFilter+ "}" "}";
	public AtomicEventElements getAtomicEventAccess() {
		return (pAtomicEvent != null) ? pAtomicEvent : (pAtomicEvent = new AtomicEventElements());
	}
	
	public ParserRule getAtomicEventRule() {
		return getAtomicEventAccess().getRule();
	}

	//IQPatternEvent:
	//
	//	"IQPatternEvent" name=ID "()" "{" "IQPatternRef" ":" iqpattern= //[iqpl::Pattern]
	//
	//	STRING "ChangeType" ":" changeType=IQPatternChangeType "}";
	public IQPatternEventElements getIQPatternEventAccess() {
		return (pIQPatternEvent != null) ? pIQPatternEvent : (pIQPatternEvent = new IQPatternEventElements());
	}
	
	public ParserRule getIQPatternEventRule() {
		return getIQPatternEventAccess().getRule();
	}

	//ComplexEvent:
	//
	//	annotations+=Annotations* "ComplexEvent" name=ID paramlist=CEParamlist "{"
	//
	//	complexEventExpressions+=ComplexEventExpression* "}";
	public ComplexEventElements getComplexEventAccess() {
		return (pComplexEvent != null) ? pComplexEvent : (pComplexEvent = new ComplexEventElements());
	}
	
	public ParserRule getComplexEventRule() {
		return getComplexEventAccess().getRule();
	}

	//CEParamlist:
	//
	//	{CEParamlist} "(" params+=EventParamWithType* ")";
	public CEParamlistElements getCEParamlistAccess() {
		return (pCEParamlist != null) ? pCEParamlist : (pCEParamlist = new CEParamlistElements());
	}
	
	public ParserRule getCEParamlistRule() {
		return getCEParamlistAccess().getRule();
	}

	//EventParamWithType:
	//
	//	name=ID ":" type=[Event];
	public EventParamWithTypeElements getEventParamWithTypeAccess() {
		return (pEventParamWithType != null) ? pEventParamWithType : (pEventParamWithType = new EventParamWithTypeElements());
	}
	
	public ParserRule getEventParamWithTypeRule() {
		return getEventParamWithTypeAccess().getRule();
	}

	//ParameterFilter:
	//
	//	attributeName=ID paramFilterRule=ParameterFilterRule;
	public ParameterFilterElements getParameterFilterAccess() {
		return (pParameterFilter != null) ? pParameterFilter : (pParameterFilter = new ParameterFilterElements());
	}
	
	public ParserRule getParameterFilterRule() {
		return getParameterFilterAccess().getRule();
	}

	//enum IQPatternChangeType:
	//
	//	FOUND | LOST;
	public IQPatternChangeTypeElements getIQPatternChangeTypeAccess() {
		return (unknownRuleIQPatternChangeType != null) ? unknownRuleIQPatternChangeType : (unknownRuleIQPatternChangeType = new IQPatternChangeTypeElements());
	}
	
	public EnumRule getIQPatternChangeTypeRule() {
		return getIQPatternChangeTypeAccess().getRule();
	}

	//Annotations:
	//
	//	ContextAnnotation | SamplingAnnotation | PriorityAnnotation;
	public AnnotationsElements getAnnotationsAccess() {
		return (pAnnotations != null) ? pAnnotations : (pAnnotations = new AnnotationsElements());
	}
	
	public ParserRule getAnnotationsRule() {
		return getAnnotationsAccess().getRule();
	}

	//ContextAnnotation:
	//
	//	"@Context" "(" context=Context ")";
	public ContextAnnotationElements getContextAnnotationAccess() {
		return (pContextAnnotation != null) ? pContextAnnotation : (pContextAnnotation = new ContextAnnotationElements());
	}
	
	public ParserRule getContextAnnotationRule() {
		return getContextAnnotationAccess().getRule();
	}

	//enum Context:
	//
	//	Chronicle | Recent | Unrestricted;
	public ContextElements getContextAccess() {
		return (unknownRuleContext != null) ? unknownRuleContext : (unknownRuleContext = new ContextElements());
	}
	
	public EnumRule getContextRule() {
		return getContextAccess().getRule();
	}

	//SamplingAnnotation:
	//
	//	"@SamplingTime" "(" sampling=INT ")";
	public SamplingAnnotationElements getSamplingAnnotationAccess() {
		return (pSamplingAnnotation != null) ? pSamplingAnnotation : (pSamplingAnnotation = new SamplingAnnotationElements());
	}
	
	public ParserRule getSamplingAnnotationRule() {
		return getSamplingAnnotationAccess().getRule();
	}

	//PriorityAnnotation:
	//
	//	"@Priority" "(" priority=INT ")";
	public PriorityAnnotationElements getPriorityAnnotationAccess() {
		return (pPriorityAnnotation != null) ? pPriorityAnnotation : (pPriorityAnnotation = new PriorityAnnotationElements());
	}
	
	public ParserRule getPriorityAnnotationRule() {
		return getPriorityAnnotationAccess().getRule();
	}

	//ParameterFilterRule:
	//
	//	RangeFilter | NumericFilter | LiteralFilter;
	public ParameterFilterRuleElements getParameterFilterRuleAccess() {
		return (pParameterFilterRule != null) ? pParameterFilterRule : (pParameterFilterRule = new ParameterFilterRuleElements());
	}
	
	public ParserRule getParameterFilterRuleRule() {
		return getParameterFilterRuleAccess().getRule();
	}

	//RangeFilter:
	//
	//	neg=NegationOpartor? "in" range=Range;
	public RangeFilterElements getRangeFilterAccess() {
		return (pRangeFilter != null) ? pRangeFilter : (pRangeFilter = new RangeFilterElements());
	}
	
	public ParserRule getRangeFilterRule() {
		return getRangeFilterAccess().getRule();
	}

	//Range:
	//
	//	OpenOpen | OpenClosed | ClosedClosed | ClosedOpen;
	public RangeElements getRangeAccess() {
		return (pRange != null) ? pRange : (pRange = new RangeElements());
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//OpenOpen:
	//
	//	"(" lowerBound=DOUBLE "," upperBound=DOUBLE ")";
	public OpenOpenElements getOpenOpenAccess() {
		return (pOpenOpen != null) ? pOpenOpen : (pOpenOpen = new OpenOpenElements());
	}
	
	public ParserRule getOpenOpenRule() {
		return getOpenOpenAccess().getRule();
	}

	//OpenClosed:
	//
	//	"(" lowerBound=DOUBLE "," upperBound=DOUBLE "]";
	public OpenClosedElements getOpenClosedAccess() {
		return (pOpenClosed != null) ? pOpenClosed : (pOpenClosed = new OpenClosedElements());
	}
	
	public ParserRule getOpenClosedRule() {
		return getOpenClosedAccess().getRule();
	}

	//ClosedClosed:
	//
	//	"[" lowerBound=DOUBLE "," upperBound=DOUBLE ")";
	public ClosedClosedElements getClosedClosedAccess() {
		return (pClosedClosed != null) ? pClosedClosed : (pClosedClosed = new ClosedClosedElements());
	}
	
	public ParserRule getClosedClosedRule() {
		return getClosedClosedAccess().getRule();
	}

	//ClosedOpen:
	//
	//	"[" lowerBound=DOUBLE "," upperBound=DOUBLE "]";
	public ClosedOpenElements getClosedOpenAccess() {
		return (pClosedOpen != null) ? pClosedOpen : (pClosedOpen = new ClosedOpenElements());
	}
	
	public ParserRule getClosedOpenRule() {
		return getClosedOpenAccess().getRule();
	}

	//NumericFilter:
	//
	//	operator=NumericOperator value=DOUBLE;
	public NumericFilterElements getNumericFilterAccess() {
		return (pNumericFilter != null) ? pNumericFilter : (pNumericFilter = new NumericFilterElements());
	}
	
	public ParserRule getNumericFilterRule() {
		return getNumericFilterAccess().getRule();
	}

	//NumericOperator:
	//
	//	"<" | "=<" | "==" | "!=" | ">=" | ">";
	public NumericOperatorElements getNumericOperatorAccess() {
		return (pNumericOperator != null) ? pNumericOperator : (pNumericOperator = new NumericOperatorElements());
	}
	
	public ParserRule getNumericOperatorRule() {
		return getNumericOperatorAccess().getRule();
	}

	//LiteralFilter:
	//
	//	neg=NegationOpartor? operator=LiteralOperator value=STRING;
	public LiteralFilterElements getLiteralFilterAccess() {
		return (pLiteralFilter != null) ? pLiteralFilter : (pLiteralFilter = new LiteralFilterElements());
	}
	
	public ParserRule getLiteralFilterRule() {
		return getLiteralFilterAccess().getRule();
	}

	//LiteralOperator:
	//
	//	"contains" | "startsWith" | "endsWith";
	public LiteralOperatorElements getLiteralOperatorAccess() {
		return (pLiteralOperator != null) ? pLiteralOperator : (pLiteralOperator = new LiteralOperatorElements());
	}
	
	public ParserRule getLiteralOperatorRule() {
		return getLiteralOperatorAccess().getRule();
	}

	//NegationOpartor:
	//
	//	"not";
	public NegationOpartorElements getNegationOpartorAccess() {
		return (pNegationOpartor != null) ? pNegationOpartor : (pNegationOpartor = new NegationOpartorElements());
	}
	
	public ParserRule getNegationOpartorRule() {
		return getNegationOpartorAccess().getRule();
	}

	//ComplexEventExpression: //| ConcurrentExpression
	//
	//	FollowsExpression;
	public ComplexEventExpressionElements getComplexEventExpressionAccess() {
		return (pComplexEventExpression != null) ? pComplexEventExpression : (pComplexEventExpression = new ComplexEventExpressionElements());
	}
	
	public ParserRule getComplexEventExpressionRule() {
		return getComplexEventExpressionAccess().getRule();
	}

	//FollowsExpression:
	//
	//	firstEvent+=EventWithMultiplicity events+=EventWithFollowsOperator*;
	public FollowsExpressionElements getFollowsExpressionAccess() {
		return (pFollowsExpression != null) ? pFollowsExpression : (pFollowsExpression = new FollowsExpressionElements());
	}
	
	public ParserRule getFollowsExpressionRule() {
		return getFollowsExpressionAccess().getRule();
	}

	//EventWithFollowsOperator:
	//
	//	operator=FollowsOperator event=EventWithMultiplicity;
	public EventWithFollowsOperatorElements getEventWithFollowsOperatorAccess() {
		return (pEventWithFollowsOperator != null) ? pEventWithFollowsOperator : (pEventWithFollowsOperator = new EventWithFollowsOperatorElements());
	}
	
	public ParserRule getEventWithFollowsOperatorRule() {
		return getEventWithFollowsOperatorAccess().getRule();
	}

	//FollowsOperator:
	//
	//	FollowsOperatorNoTW | FollowsOperatorViaTW;
	public FollowsOperatorElements getFollowsOperatorAccess() {
		return (pFollowsOperator != null) ? pFollowsOperator : (pFollowsOperator = new FollowsOperatorElements());
	}
	
	public ParserRule getFollowsOperatorRule() {
		return getFollowsOperatorAccess().getRule();
	}

	//FollowsOperatorNoTW:
	//
	//	{FollowsOperatorNoTW} "->";
	public FollowsOperatorNoTWElements getFollowsOperatorNoTWAccess() {
		return (pFollowsOperatorNoTW != null) ? pFollowsOperatorNoTW : (pFollowsOperatorNoTW = new FollowsOperatorNoTWElements());
	}
	
	public ParserRule getFollowsOperatorNoTWRule() {
		return getFollowsOperatorNoTWAccess().getRule();
	}

	//FollowsOperatorViaTW:
	//
	//	"-[" timewindow=INT "]->";
	public FollowsOperatorViaTWElements getFollowsOperatorViaTWAccess() {
		return (pFollowsOperatorViaTW != null) ? pFollowsOperatorViaTW : (pFollowsOperatorViaTW = new FollowsOperatorViaTWElements());
	}
	
	public ParserRule getFollowsOperatorViaTWRule() {
		return getFollowsOperatorViaTWAccess().getRule();
	}

	//EventWithMultiplicity:
	//
	//	event=[EventParamWithType] ("{" multiplicity=INT "}")?;
	public EventWithMultiplicityElements getEventWithMultiplicityAccess() {
		return (pEventWithMultiplicity != null) ? pEventWithMultiplicity : (pEventWithMultiplicity = new EventWithMultiplicityElements());
	}
	
	public ParserRule getEventWithMultiplicityRule() {
		return getEventWithMultiplicityAccess().getRule();
	}

	//Source:
	//
	//	"source" name=ID "{" ("register" adapter+=Adapter)+ "}";
	public SourceElements getSourceAccess() {
		return (pSource != null) ? pSource : (pSource = new SourceElements());
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}

	//Adapter:
	//
	//	name=STRING;
	public AdapterElements getAdapterAccess() {
		return (pAdapter != null) ? pAdapter : (pAdapter = new AdapterElements());
	}
	
	public ParserRule getAdapterRule() {
		return getAdapterAccess().getRule();
	}

	//XExpression:
	//
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
	//
	//	")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression |
	//
	//	XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression |
	//
	//	XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//
	//StaticQualifier:
	//
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
