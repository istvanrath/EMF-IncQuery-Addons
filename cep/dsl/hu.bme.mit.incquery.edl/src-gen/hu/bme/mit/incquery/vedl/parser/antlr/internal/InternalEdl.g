/*
* generated by Xtext
*/
grammar InternalEdl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package hu.bme.mit.incquery.vedl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.incquery.vedl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.incquery.vedl.services.EdlGrammarAccess;

}

@parser::members {

 	private EdlGrammarAccess grammarAccess;
 	
    public InternalEdlParser(TokenStream input, EdlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PackageDeclaration";	
   	}
   	
   	@Override
   	protected EdlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getUsagesUsageParserRuleCall_2_0()); 
	    }
		lv_usages_2_0=ruleUsage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		add(
       			$current, 
       			"usages",
        		lv_usages_2_0, 
        		"Usage");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getModelModelParserRuleCall_3_0()); 
	    }
		lv_model_3_0=ruleModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"model",
        		lv_model_3_0, 
        		"Model");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); } 
	 iv_ruleDOUBLE=ruleDOUBLE 
	 { $current=$iv_ruleDOUBLE.current.getText(); }  
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDOUBLEAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleUsage
entryRuleUsage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsageRule()); }
	 iv_ruleUsage=ruleUsage 
	 { $current=$iv_ruleUsage.current; } 
	 EOF 
;

// Rule Usage
ruleUsage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUsageAccess().getIQUsageParserRuleCall_0()); 
    }
    this_IQUsage_0=ruleIQUsage
    { 
        $current = $this_IQUsage_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUsageAccess().getEventSourceUsageParserRuleCall_1()); 
    }
    this_EventSourceUsage_1=ruleEventSourceUsage
    { 
        $current = $this_EventSourceUsage_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIQUsage
entryRuleIQUsage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIQUsageRule()); }
	 iv_ruleIQUsage=ruleIQUsage 
	 { $current=$iv_ruleIQUsage.current; } 
	 EOF 
;

// Rule IQUsage
ruleIQUsage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='uses-incquery-patterns' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIQUsageAccess().getUsesIncqueryPatternsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIQUsageAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIQUsageRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEventSourceUsage
entryRuleEventSourceUsage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventSourceUsageRule()); }
	 iv_ruleEventSourceUsage=ruleEventSourceUsage 
	 { $current=$iv_ruleEventSourceUsage.current; } 
	 EOF 
;

// Rule EventSourceUsage
ruleEventSourceUsage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='uses-eventsources' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventSourceUsageAccess().getUsesEventsourcesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventSourceUsageAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventSourceUsageRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAnnotationsAnnotationsParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotations");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='EventModel' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getEventModelKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getEventsEventParserRuleCall_4_0()); 
	    }
		lv_events_4_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"events",
        		lv_events_4_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_5());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEventAccess().getAbstractAtomicEventParserRuleCall_0()); 
    }
    this_AbstractAtomicEvent_0=ruleAbstractAtomicEvent
    { 
        $current = $this_AbstractAtomicEvent_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEventAccess().getComplexEventParserRuleCall_1()); 
    }
    this_ComplexEvent_1=ruleComplexEvent
    { 
        $current = $this_ComplexEvent_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAbstractAtomicEvent
entryRuleAbstractAtomicEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractAtomicEventRule()); }
	 iv_ruleAbstractAtomicEvent=ruleAbstractAtomicEvent 
	 { $current=$iv_ruleAbstractAtomicEvent.current; } 
	 EOF 
;

// Rule AbstractAtomicEvent
ruleAbstractAtomicEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractAtomicEventAccess().getAtomicEventParserRuleCall_0()); 
    }
    this_AtomicEvent_0=ruleAtomicEvent
    { 
        $current = $this_AtomicEvent_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractAtomicEventAccess().getIQPatternEventParserRuleCall_1()); 
    }
    this_IQPatternEvent_1=ruleIQPatternEvent
    { 
        $current = $this_IQPatternEvent_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicEvent
entryRuleAtomicEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicEventRule()); }
	 iv_ruleAtomicEvent=ruleAtomicEvent 
	 { $current=$iv_ruleAtomicEvent.current; } 
	 EOF 
;

// Rule AtomicEvent
ruleAtomicEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicEventAccess().getAnnotationsAnnotationsParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicEventRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotations");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='AtomicEvent' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtomicEventAccess().getAtomicEventKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getAtomicEventAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='()' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAtomicEventAccess().getLeftParenthesisRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicEventAccess().getLeftCurlyBracketKeyword_4());
    }
	otherlv_5='id' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtomicEventAccess().getIdKeyword_5());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAtomicEventAccess().getColonKeyword_6());
    }
(
(
		lv_id_7_0=RULE_STRING
		{
			newLeafNode(lv_id_7_0, grammarAccess.getAtomicEventAccess().getIdSTRINGTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_7_0, 
        		"STRING");
	    }

)
)	otherlv_8='source' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAtomicEventAccess().getSourceKeyword_8());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAtomicEventAccess().getColonKeyword_9());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicEventRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getAtomicEventAccess().getSourceSourceCrossReference_10_0()); 
	}

)
)	otherlv_11='parameterFilters' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAtomicEventAccess().getParameterFiltersKeyword_11());
    }
	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAtomicEventAccess().getLeftCurlyBracketKeyword_12());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicEventAccess().getParameterFiltersParameterFilterParserRuleCall_13_0()); 
	    }
		lv_parameterFilters_13_0=ruleParameterFilter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicEventRule());
	        }
       		add(
       			$current, 
       			"parameterFilters",
        		lv_parameterFilters_13_0, 
        		"ParameterFilter");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAtomicEventAccess().getRightCurlyBracketKeyword_14());
    }
	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getAtomicEventAccess().getRightCurlyBracketKeyword_15());
    }
)
;





// Entry rule entryRuleIQPatternEvent
entryRuleIQPatternEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIQPatternEventRule()); }
	 iv_ruleIQPatternEvent=ruleIQPatternEvent 
	 { $current=$iv_ruleIQPatternEvent.current; } 
	 EOF 
;

// Rule IQPatternEvent
ruleIQPatternEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='IQPatternEvent' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIQPatternEventAccess().getIQPatternEventKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getIQPatternEventAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIQPatternEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='()' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIQPatternEventAccess().getLeftParenthesisRightParenthesisKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIQPatternEventAccess().getLeftCurlyBracketKeyword_3());
    }
	otherlv_4='IQPatternRef' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIQPatternEventAccess().getIQPatternRefKeyword_4());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIQPatternEventAccess().getColonKeyword_5());
    }
(
(
		lv_iqpattern_6_0=RULE_STRING
		{
			newLeafNode(lv_iqpattern_6_0, grammarAccess.getIQPatternEventAccess().getIqpatternSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIQPatternEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"iqpattern",
        		lv_iqpattern_6_0, 
        		"STRING");
	    }

)
)	otherlv_7='ChangeType' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIQPatternEventAccess().getChangeTypeKeyword_7());
    }
	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIQPatternEventAccess().getColonKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIQPatternEventAccess().getChangeTypeIQPatternChangeTypeEnumRuleCall_9_0()); 
	    }
		lv_changeType_9_0=ruleIQPatternChangeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIQPatternEventRule());
	        }
       		set(
       			$current, 
       			"changeType",
        		lv_changeType_9_0, 
        		"IQPatternChangeType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getIQPatternEventAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleComplexEvent
entryRuleComplexEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexEventRule()); }
	 iv_ruleComplexEvent=ruleComplexEvent 
	 { $current=$iv_ruleComplexEvent.current; } 
	 EOF 
;

// Rule ComplexEvent
ruleComplexEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComplexEventAccess().getAnnotationsAnnotationsParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexEventRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"Annotations");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='ComplexEvent' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComplexEventAccess().getComplexEventKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getComplexEventAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexEventAccess().getParamlistCEParamlistParserRuleCall_3_0()); 
	    }
		lv_paramlist_3_0=ruleCEParamlist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexEventRule());
	        }
       		set(
       			$current, 
       			"paramlist",
        		lv_paramlist_3_0, 
        		"CEParamlist");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComplexEventAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexEventAccess().getComplexEventExpressionsComplexEventExpressionParserRuleCall_5_0()); 
	    }
		lv_complexEventExpressions_5_0=ruleComplexEventExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexEventRule());
	        }
       		add(
       			$current, 
       			"complexEventExpressions",
        		lv_complexEventExpressions_5_0, 
        		"ComplexEventExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getComplexEventAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleCEParamlist
entryRuleCEParamlist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCEParamlistRule()); }
	 iv_ruleCEParamlist=ruleCEParamlist 
	 { $current=$iv_ruleCEParamlist.current; } 
	 EOF 
;

// Rule CEParamlist
ruleCEParamlist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCEParamlistAccess().getCEParamlistAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCEParamlistAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCEParamlistAccess().getParamsEventParamWithTypeParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleEventParamWithType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCEParamlistRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"EventParamWithType");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCEParamlistAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleEventParamWithType
entryRuleEventParamWithType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventParamWithTypeRule()); }
	 iv_ruleEventParamWithType=ruleEventParamWithType 
	 { $current=$iv_ruleEventParamWithType.current; } 
	 EOF 
;

// Rule EventParamWithType
ruleEventParamWithType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEventParamWithTypeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventParamWithTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventParamWithTypeAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventParamWithTypeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getEventParamWithTypeAccess().getTypeEventCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleParameterFilter
entryRuleParameterFilter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterFilterRule()); }
	 iv_ruleParameterFilter=ruleParameterFilter 
	 { $current=$iv_ruleParameterFilter.current; } 
	 EOF 
;

// Rule ParameterFilter
ruleParameterFilter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_attributeName_0_0=RULE_ID
		{
			newLeafNode(lv_attributeName_0_0, grammarAccess.getParameterFilterAccess().getAttributeNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterFilterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attributeName",
        		lv_attributeName_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterFilterAccess().getParamFilterRuleParameterFilterRuleParserRuleCall_1_0()); 
	    }
		lv_paramFilterRule_1_0=ruleParameterFilterRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterFilterRule());
	        }
       		set(
       			$current, 
       			"paramFilterRule",
        		lv_paramFilterRule_1_0, 
        		"ParameterFilterRule");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAnnotations
entryRuleAnnotations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationsRule()); }
	 iv_ruleAnnotations=ruleAnnotations 
	 { $current=$iv_ruleAnnotations.current; } 
	 EOF 
;

// Rule Annotations
ruleAnnotations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAnnotationsAccess().getContextAnnotationParserRuleCall_0()); 
    }
    this_ContextAnnotation_0=ruleContextAnnotation
    { 
        $current = $this_ContextAnnotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAnnotationsAccess().getSamplingAnnotationParserRuleCall_1()); 
    }
    this_SamplingAnnotation_1=ruleSamplingAnnotation
    { 
        $current = $this_SamplingAnnotation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAnnotationsAccess().getPriorityAnnotationParserRuleCall_2()); 
    }
    this_PriorityAnnotation_2=rulePriorityAnnotation
    { 
        $current = $this_PriorityAnnotation_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleContextAnnotation
entryRuleContextAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContextAnnotationRule()); }
	 iv_ruleContextAnnotation=ruleContextAnnotation 
	 { $current=$iv_ruleContextAnnotation.current; } 
	 EOF 
;

// Rule ContextAnnotation
ruleContextAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@Context' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getContextAnnotationAccess().getContextKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContextAnnotationAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAnnotationAccess().getContextContextEnumRuleCall_2_0()); 
	    }
		lv_context_2_0=ruleContext		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextAnnotationRule());
	        }
       		set(
       			$current, 
       			"context",
        		lv_context_2_0, 
        		"Context");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getContextAnnotationAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSamplingAnnotation
entryRuleSamplingAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSamplingAnnotationRule()); }
	 iv_ruleSamplingAnnotation=ruleSamplingAnnotation 
	 { $current=$iv_ruleSamplingAnnotation.current; } 
	 EOF 
;

// Rule SamplingAnnotation
ruleSamplingAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@SamplingTime' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSamplingAnnotationAccess().getSamplingTimeKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSamplingAnnotationAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_sampling_2_0=RULE_INT
		{
			newLeafNode(lv_sampling_2_0, grammarAccess.getSamplingAnnotationAccess().getSamplingINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSamplingAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sampling",
        		lv_sampling_2_0, 
        		"INT");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSamplingAnnotationAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRulePriorityAnnotation
entryRulePriorityAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPriorityAnnotationRule()); }
	 iv_rulePriorityAnnotation=rulePriorityAnnotation 
	 { $current=$iv_rulePriorityAnnotation.current; } 
	 EOF 
;

// Rule PriorityAnnotation
rulePriorityAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@Priority' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPriorityAnnotationAccess().getPriorityKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPriorityAnnotationAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_priority_2_0=RULE_INT
		{
			newLeafNode(lv_priority_2_0, grammarAccess.getPriorityAnnotationAccess().getPriorityINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPriorityAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"priority",
        		lv_priority_2_0, 
        		"INT");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPriorityAnnotationAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleParameterFilterRule
entryRuleParameterFilterRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterFilterRuleRule()); }
	 iv_ruleParameterFilterRule=ruleParameterFilterRule 
	 { $current=$iv_ruleParameterFilterRule.current; } 
	 EOF 
;

// Rule ParameterFilterRule
ruleParameterFilterRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterFilterRuleAccess().getRangeFilterParserRuleCall_0()); 
    }
    this_RangeFilter_0=ruleRangeFilter
    { 
        $current = $this_RangeFilter_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterFilterRuleAccess().getNumericFilterParserRuleCall_1()); 
    }
    this_NumericFilter_1=ruleNumericFilter
    { 
        $current = $this_NumericFilter_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getParameterFilterRuleAccess().getLiteralFilterParserRuleCall_2()); 
    }
    this_LiteralFilter_2=ruleLiteralFilter
    { 
        $current = $this_LiteralFilter_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRangeFilter
entryRuleRangeFilter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeFilterRule()); }
	 iv_ruleRangeFilter=ruleRangeFilter 
	 { $current=$iv_ruleRangeFilter.current; } 
	 EOF 
;

// Rule RangeFilter
ruleRangeFilter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRangeFilterAccess().getNegNegationOpartorParserRuleCall_0_0()); 
	    }
		lv_neg_0_0=ruleNegationOpartor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeFilterRule());
	        }
       		set(
       			$current, 
       			"neg",
        		lv_neg_0_0, 
        		"NegationOpartor");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='in' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRangeFilterAccess().getInKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeFilterAccess().getRangeRangeParserRuleCall_2_0()); 
	    }
		lv_range_2_0=ruleRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeFilterRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_2_0, 
        		"Range");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRangeAccess().getOpenOpenParserRuleCall_0()); 
    }
    this_OpenOpen_0=ruleOpenOpen
    { 
        $current = $this_OpenOpen_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRangeAccess().getOpenClosedParserRuleCall_1()); 
    }
    this_OpenClosed_1=ruleOpenClosed
    { 
        $current = $this_OpenClosed_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRangeAccess().getClosedClosedParserRuleCall_2()); 
    }
    this_ClosedClosed_2=ruleClosedClosed
    { 
        $current = $this_ClosedClosed_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRangeAccess().getClosedOpenParserRuleCall_3()); 
    }
    this_ClosedOpen_3=ruleClosedOpen
    { 
        $current = $this_ClosedOpen_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpenOpen
entryRuleOpenOpen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenOpenRule()); }
	 iv_ruleOpenOpen=ruleOpenOpen 
	 { $current=$iv_ruleOpenOpen.current; } 
	 EOF 
;

// Rule OpenOpen
ruleOpenOpen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOpenOpenAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenOpenAccess().getLowerBoundDOUBLEParserRuleCall_1_0()); 
	    }
		lv_lowerBound_1_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenOpenRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOpenOpenAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenOpenAccess().getUpperBoundDOUBLEParserRuleCall_3_0()); 
	    }
		lv_upperBound_3_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenOpenRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOpenOpenAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleOpenClosed
entryRuleOpenClosed returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenClosedRule()); }
	 iv_ruleOpenClosed=ruleOpenClosed 
	 { $current=$iv_ruleOpenClosed.current; } 
	 EOF 
;

// Rule OpenClosed
ruleOpenClosed returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOpenClosedAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenClosedAccess().getLowerBoundDOUBLEParserRuleCall_1_0()); 
	    }
		lv_lowerBound_1_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenClosedRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOpenClosedAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenClosedAccess().getUpperBoundDOUBLEParserRuleCall_3_0()); 
	    }
		lv_upperBound_3_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenClosedRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOpenClosedAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleClosedClosed
entryRuleClosedClosed returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClosedClosedRule()); }
	 iv_ruleClosedClosed=ruleClosedClosed 
	 { $current=$iv_ruleClosedClosed.current; } 
	 EOF 
;

// Rule ClosedClosed
ruleClosedClosed returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClosedClosedAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClosedClosedAccess().getLowerBoundDOUBLEParserRuleCall_1_0()); 
	    }
		lv_lowerBound_1_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClosedClosedRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClosedClosedAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClosedClosedAccess().getUpperBoundDOUBLEParserRuleCall_3_0()); 
	    }
		lv_upperBound_3_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClosedClosedRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClosedClosedAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleClosedOpen
entryRuleClosedOpen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClosedOpenRule()); }
	 iv_ruleClosedOpen=ruleClosedOpen 
	 { $current=$iv_ruleClosedOpen.current; } 
	 EOF 
;

// Rule ClosedOpen
ruleClosedOpen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClosedOpenAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClosedOpenAccess().getLowerBoundDOUBLEParserRuleCall_1_0()); 
	    }
		lv_lowerBound_1_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClosedOpenRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClosedOpenAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClosedOpenAccess().getUpperBoundDOUBLEParserRuleCall_3_0()); 
	    }
		lv_upperBound_3_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClosedOpenRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClosedOpenAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleNumericFilter
entryRuleNumericFilter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericFilterRule()); }
	 iv_ruleNumericFilter=ruleNumericFilter 
	 { $current=$iv_ruleNumericFilter.current; } 
	 EOF 
;

// Rule NumericFilter
ruleNumericFilter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericFilterAccess().getOperatorNumericOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleNumericOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericFilterRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"NumericOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericFilterAccess().getValueDOUBLEParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericFilterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNumericOperator
entryRuleNumericOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericOperatorRule()); } 
	 iv_ruleNumericOperator=ruleNumericOperator 
	 { $current=$iv_ruleNumericOperator.current.getText(); }  
	 EOF 
;

// Rule NumericOperator
ruleNumericOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumericOperatorAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='=<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumericOperatorAccess().getEqualsSignLessThanSignKeyword_1()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumericOperatorAccess().getEqualsSignEqualsSignKeyword_2()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumericOperatorAccess().getExclamationMarkEqualsSignKeyword_3()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumericOperatorAccess().getGreaterThanSignEqualsSignKeyword_4()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumericOperatorAccess().getGreaterThanSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleLiteralFilter
entryRuleLiteralFilter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralFilterRule()); }
	 iv_ruleLiteralFilter=ruleLiteralFilter 
	 { $current=$iv_ruleLiteralFilter.current; } 
	 EOF 
;

// Rule LiteralFilter
ruleLiteralFilter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralFilterAccess().getNegNegationOpartorParserRuleCall_0_0()); 
	    }
		lv_neg_0_0=ruleNegationOpartor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralFilterRule());
	        }
       		set(
       			$current, 
       			"neg",
        		lv_neg_0_0, 
        		"NegationOpartor");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralFilterAccess().getOperatorLiteralOperatorParserRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleLiteralOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralFilterRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"LiteralOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getLiteralFilterAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralFilterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleLiteralOperator
entryRuleLiteralOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralOperatorRule()); } 
	 iv_ruleLiteralOperator=ruleLiteralOperator 
	 { $current=$iv_ruleLiteralOperator.current.getText(); }  
	 EOF 
;

// Rule LiteralOperator
ruleLiteralOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='contains' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralOperatorAccess().getContainsKeyword_0()); 
    }

    |
	kw='startsWith' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralOperatorAccess().getStartsWithKeyword_1()); 
    }

    |
	kw='endsWith' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralOperatorAccess().getEndsWithKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleNegationOpartor
entryRuleNegationOpartor returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationOpartorRule()); } 
	 iv_ruleNegationOpartor=ruleNegationOpartor 
	 { $current=$iv_ruleNegationOpartor.current.getText(); }  
	 EOF 
;

// Rule NegationOpartor
ruleNegationOpartor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNegationOpartorAccess().getNotKeyword()); 
    }

    ;





// Entry rule entryRuleComplexEventExpression
entryRuleComplexEventExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexEventExpressionRule()); }
	 iv_ruleComplexEventExpression=ruleComplexEventExpression 
	 { $current=$iv_ruleComplexEventExpression.current; } 
	 EOF 
;

// Rule ComplexEventExpression
ruleComplexEventExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getComplexEventExpressionAccess().getFollowsExpressionParserRuleCall()); 
    }
    this_FollowsExpression_0=ruleFollowsExpression
    { 
        $current = $this_FollowsExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleFollowsExpression
entryRuleFollowsExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFollowsExpressionRule()); }
	 iv_ruleFollowsExpression=ruleFollowsExpression 
	 { $current=$iv_ruleFollowsExpression.current; } 
	 EOF 
;

// Rule FollowsExpression
ruleFollowsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFollowsExpressionAccess().getFirstEventEventWithMultiplicityParserRuleCall_0_0()); 
	    }
		lv_firstEvent_0_0=ruleEventWithMultiplicity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFollowsExpressionRule());
	        }
       		add(
       			$current, 
       			"firstEvent",
        		lv_firstEvent_0_0, 
        		"EventWithMultiplicity");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFollowsExpressionAccess().getEventsEventWithFollowsOperatorParserRuleCall_1_0()); 
	    }
		lv_events_1_0=ruleEventWithFollowsOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFollowsExpressionRule());
	        }
       		add(
       			$current, 
       			"events",
        		lv_events_1_0, 
        		"EventWithFollowsOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleEventWithFollowsOperator
entryRuleEventWithFollowsOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventWithFollowsOperatorRule()); }
	 iv_ruleEventWithFollowsOperator=ruleEventWithFollowsOperator 
	 { $current=$iv_ruleEventWithFollowsOperator.current; } 
	 EOF 
;

// Rule EventWithFollowsOperator
ruleEventWithFollowsOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEventWithFollowsOperatorAccess().getOperatorFollowsOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleFollowsOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventWithFollowsOperatorRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"FollowsOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEventWithFollowsOperatorAccess().getEventEventWithMultiplicityParserRuleCall_1_0()); 
	    }
		lv_event_1_0=ruleEventWithMultiplicity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventWithFollowsOperatorRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_1_0, 
        		"EventWithMultiplicity");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFollowsOperator
entryRuleFollowsOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFollowsOperatorRule()); }
	 iv_ruleFollowsOperator=ruleFollowsOperator 
	 { $current=$iv_ruleFollowsOperator.current; } 
	 EOF 
;

// Rule FollowsOperator
ruleFollowsOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFollowsOperatorAccess().getFollowsOperatorNoTWParserRuleCall_0()); 
    }
    this_FollowsOperatorNoTW_0=ruleFollowsOperatorNoTW
    { 
        $current = $this_FollowsOperatorNoTW_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFollowsOperatorAccess().getFollowsOperatorViaTWParserRuleCall_1()); 
    }
    this_FollowsOperatorViaTW_1=ruleFollowsOperatorViaTW
    { 
        $current = $this_FollowsOperatorViaTW_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFollowsOperatorNoTW
entryRuleFollowsOperatorNoTW returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFollowsOperatorNoTWRule()); }
	 iv_ruleFollowsOperatorNoTW=ruleFollowsOperatorNoTW 
	 { $current=$iv_ruleFollowsOperatorNoTW.current; } 
	 EOF 
;

// Rule FollowsOperatorNoTW
ruleFollowsOperatorNoTW returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFollowsOperatorNoTWAccess().getFollowsOperatorNoTWAction_0(),
            $current);
    }
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFollowsOperatorNoTWAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
)
;





// Entry rule entryRuleFollowsOperatorViaTW
entryRuleFollowsOperatorViaTW returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFollowsOperatorViaTWRule()); }
	 iv_ruleFollowsOperatorViaTW=ruleFollowsOperatorViaTW 
	 { $current=$iv_ruleFollowsOperatorViaTW.current; } 
	 EOF 
;

// Rule FollowsOperatorViaTW
ruleFollowsOperatorViaTW returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='-[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFollowsOperatorViaTWAccess().getHyphenMinusLeftSquareBracketKeyword_0());
    }
(
(
		lv_timewindow_1_0=RULE_INT
		{
			newLeafNode(lv_timewindow_1_0, grammarAccess.getFollowsOperatorViaTWAccess().getTimewindowINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFollowsOperatorViaTWRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"timewindow",
        		lv_timewindow_1_0, 
        		"INT");
	    }

)
)	otherlv_2=']->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFollowsOperatorViaTWAccess().getRightSquareBracketHyphenMinusGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleEventWithMultiplicity
entryRuleEventWithMultiplicity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventWithMultiplicityRule()); }
	 iv_ruleEventWithMultiplicity=ruleEventWithMultiplicity 
	 { $current=$iv_ruleEventWithMultiplicity.current; } 
	 EOF 
;

// Rule EventWithMultiplicity
ruleEventWithMultiplicity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventWithMultiplicityRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEventWithMultiplicityAccess().getEventEventParamWithTypeCrossReference_0_0()); 
	}

)
)(	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventWithMultiplicityAccess().getLeftCurlyBracketKeyword_1_0());
    }
(
(
		lv_multiplicity_2_0=RULE_INT
		{
			newLeafNode(lv_multiplicity_2_0, grammarAccess.getEventWithMultiplicityAccess().getMultiplicityINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventWithMultiplicityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"multiplicity",
        		lv_multiplicity_2_0, 
        		"INT");
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEventWithMultiplicityAccess().getRightCurlyBracketKeyword_1_2());
    }
)?)
;





// Rule IQPatternChangeType
ruleIQPatternChangeType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='FOUND' 
	{
        $current = grammarAccess.getIQPatternChangeTypeAccess().getFOUNDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getIQPatternChangeTypeAccess().getFOUNDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='LOST' 
	{
        $current = grammarAccess.getIQPatternChangeTypeAccess().getLOSTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getIQPatternChangeTypeAccess().getLOSTEnumLiteralDeclaration_1()); 
    }
));



// Rule Context
ruleContext returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Chronicle' 
	{
        $current = grammarAccess.getContextAccess().getChronicleEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getContextAccess().getChronicleEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Recent' 
	{
        $current = grammarAccess.getContextAccess().getRecentEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getContextAccess().getRecentEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Unrestricted' 
	{
        $current = grammarAccess.getContextAccess().getUnrestrictedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getContextAccess().getUnrestrictedEnumLiteralDeclaration_2()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


