/*
* generated by Xtext
*/

package hu.bme.mit.incquery.vedl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EdlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUsagesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsagesUsageParserRuleCall_2_0 = (RuleCall)cUsagesAssignment_2.eContents().get(0);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelModelParserRuleCall_3_0 = (RuleCall)cModelAssignment_3.eContents().get(0);
		
		//PackageDeclaration:
		//
		//	"package" name=QualifiedName usages+=Usage* model=Model;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName usages+=Usage* model=Model
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//usages+=Usage*
		public Assignment getUsagesAssignment_2() { return cUsagesAssignment_2; }

		//Usage
		public RuleCall getUsagesUsageParserRuleCall_2_0() { return cUsagesUsageParserRuleCall_2_0; }

		//model=Model
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }

		//Model
		public RuleCall getModelModelParserRuleCall_3_0() { return cModelModelParserRuleCall_3_0; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DOUBLE:
		//
		//	INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class UsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Usage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIQUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventSourceUsageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Usage:
		//
		//	IQUsage | EventSourceUsage;
		public ParserRule getRule() { return rule; }

		//IQUsage | EventSourceUsage
		public Alternatives getAlternatives() { return cAlternatives; }

		//IQUsage
		public RuleCall getIQUsageParserRuleCall_0() { return cIQUsageParserRuleCall_0; }

		//EventSourceUsage
		public RuleCall getEventSourceUsageParserRuleCall_1() { return cEventSourceUsageParserRuleCall_1; }
	}

	public class IQUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesIncqueryPatternsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//IQUsage:
		//
		//	"uses-incquery-patterns" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"uses-incquery-patterns" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"uses-incquery-patterns"
		public Keyword getUsesIncqueryPatternsKeyword_0() { return cUsesIncqueryPatternsKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class EventSourceUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventSourceUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesEventsourcesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//EventSourceUsage:
		//
		//	"uses-eventsources" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"uses-eventsources" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"uses-eventsources"
		public Keyword getUsesEventsourcesKeyword_0() { return cUsesEventsourcesKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cEventModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEventsEventParserRuleCall_4_0 = (RuleCall)cEventsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Model hidden(WS, ML_COMMENT, SL_COMMENT):
		//
		//	annotations+=Annotations* "EventModel" name=ID "{" events+=Event* "}";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotations* "EventModel" name=ID "{" events+=Event* "}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotations*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_0_0() { return cAnnotationsAnnotationsParserRuleCall_0_0; }

		//"EventModel"
		public Keyword getEventModelKeyword_1() { return cEventModelKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//events+=Event*
		public Assignment getEventsAssignment_4() { return cEventsAssignment_4; }

		//Event
		public RuleCall getEventsEventParserRuleCall_4_0() { return cEventsEventParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractAtomicEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Event:
		//
		//	AbstractAtomicEvent | ComplexEvent;
		public ParserRule getRule() { return rule; }

		//AbstractAtomicEvent | ComplexEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractAtomicEvent
		public RuleCall getAbstractAtomicEventParserRuleCall_0() { return cAbstractAtomicEventParserRuleCall_0; }

		//ComplexEvent
		public RuleCall getComplexEventParserRuleCall_1() { return cComplexEventParserRuleCall_1; }
	}

	public class AbstractAtomicEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractAtomicEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIQPatternEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractAtomicEvent:
		//
		//	AtomicEvent | IQPatternEvent;
		public ParserRule getRule() { return rule; }

		//AtomicEvent | IQPatternEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtomicEvent
		public RuleCall getAtomicEventParserRuleCall_0() { return cAtomicEventParserRuleCall_0; }

		//IQPatternEvent
		public RuleCall getIQPatternEventParserRuleCall_1() { return cIQPatternEventParserRuleCall_1; }
	}

	public class AtomicEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cAtomicEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSourceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSourceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cSourceSourceCrossReference_7_0 = (CrossReference)cSourceAssignment_7.eContents().get(0);
		private final RuleCall cSourceSourceIDTerminalRuleCall_7_0_1 = (RuleCall)cSourceSourceCrossReference_7_0.eContents().get(1);
		private final Keyword cIdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cIdAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cIdSTRINGTerminalRuleCall_10_0 = (RuleCall)cIdAssignment_10.eContents().get(0);
		private final Keyword cParameterFiltersKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cParameterFiltersAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cParameterFiltersParameterFilterParserRuleCall_13_0 = (RuleCall)cParameterFiltersAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//AtomicEvent:
		//
		//	annotations+=Annotations* "AtomicEvent" name=ID "()" "{" "source" ":" source=[srct::Source] "id" ":" id=STRING
		//
		//	"parameterFilters" "{" parameterFilters+=ParameterFilter+ "}" "}";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotations* "AtomicEvent" name=ID "()" "{" "source" ":" source=[srct::Source] "id" ":" id=STRING
		//
		//"parameterFilters" "{" parameterFilters+=ParameterFilter+ "}" "}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotations*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_0_0() { return cAnnotationsAnnotationsParserRuleCall_0_0; }

		//"AtomicEvent"
		public Keyword getAtomicEventKeyword_1() { return cAtomicEventKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_3() { return cLeftParenthesisRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"source"
		public Keyword getSourceKeyword_5() { return cSourceKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//source=[srct::Source]
		public Assignment getSourceAssignment_7() { return cSourceAssignment_7; }

		//[srct::Source]
		public CrossReference getSourceSourceCrossReference_7_0() { return cSourceSourceCrossReference_7_0; }

		//ID
		public RuleCall getSourceSourceIDTerminalRuleCall_7_0_1() { return cSourceSourceIDTerminalRuleCall_7_0_1; }

		//"id"
		public Keyword getIdKeyword_8() { return cIdKeyword_8; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//id=STRING
		public Assignment getIdAssignment_10() { return cIdAssignment_10; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_10_0() { return cIdSTRINGTerminalRuleCall_10_0; }

		//"parameterFilters"
		public Keyword getParameterFiltersKeyword_11() { return cParameterFiltersKeyword_11; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_12() { return cLeftCurlyBracketKeyword_12; }

		//parameterFilters+=ParameterFilter+
		public Assignment getParameterFiltersAssignment_13() { return cParameterFiltersAssignment_13; }

		//ParameterFilter
		public RuleCall getParameterFiltersParameterFilterParserRuleCall_13_0() { return cParameterFiltersParameterFilterParserRuleCall_13_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}

	public class IQPatternEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQPatternEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIQPatternEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIQPatternRefKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIqpatternAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIqpatternIQPatternParserRuleCall_6_0 = (RuleCall)cIqpatternAssignment_6.eContents().get(0);
		private final Keyword cChangeTypeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cChangeTypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cChangeTypeIQPatternChangeTypeEnumRuleCall_9_0 = (RuleCall)cChangeTypeAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//IQPatternEvent:
		//
		//	"IQPatternEvent" name=ID "()" "{" "IQPatternRef" ":" iqpattern=IQPattern "ChangeType" ":"
		//
		//	changeType=IQPatternChangeType "}";
		public ParserRule getRule() { return rule; }

		//"IQPatternEvent" name=ID "()" "{" "IQPatternRef" ":" iqpattern=IQPattern "ChangeType" ":" changeType=IQPatternChangeType
		//
		//"}"
		public Group getGroup() { return cGroup; }

		//"IQPatternEvent"
		public Keyword getIQPatternEventKeyword_0() { return cIQPatternEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_2() { return cLeftParenthesisRightParenthesisKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"IQPatternRef"
		public Keyword getIQPatternRefKeyword_4() { return cIQPatternRefKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//iqpattern=IQPattern
		public Assignment getIqpatternAssignment_6() { return cIqpatternAssignment_6; }

		//IQPattern
		public RuleCall getIqpatternIQPatternParserRuleCall_6_0() { return cIqpatternIQPatternParserRuleCall_6_0; }

		//"ChangeType"
		public Keyword getChangeTypeKeyword_7() { return cChangeTypeKeyword_7; }

		//":"
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }

		//changeType=IQPatternChangeType
		public Assignment getChangeTypeAssignment_9() { return cChangeTypeAssignment_9; }

		//IQPatternChangeType
		public RuleCall getChangeTypeIQPatternChangeTypeEnumRuleCall_9_0() { return cChangeTypeIQPatternChangeTypeEnumRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ComplexEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationsParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cComplexEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cParamlistAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamlistCEParamlistParserRuleCall_3_0 = (RuleCall)cParamlistAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComplexEvent:
		//
		//	annotations+=Annotations* "ComplexEvent" name=ID paramlist=CEParamlist "{" "}";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotations* "ComplexEvent" name=ID paramlist=CEParamlist "{" "}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotations*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotations
		public RuleCall getAnnotationsAnnotationsParserRuleCall_0_0() { return cAnnotationsAnnotationsParserRuleCall_0_0; }

		//"ComplexEvent"
		public Keyword getComplexEventKeyword_1() { return cComplexEventKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//paramlist=CEParamlist
		public Assignment getParamlistAssignment_3() { return cParamlistAssignment_3; }

		//CEParamlist
		public RuleCall getParamlistCEParamlistParserRuleCall_3_0() { return cParamlistCEParamlistParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CEParamlistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CEParamlist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCEParamlistAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsParamWithTypeParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CEParamlist:
		//
		//	{CEParamlist} "(" params+=ParamWithType* ")";
		public ParserRule getRule() { return rule; }

		//{CEParamlist} "(" params+=ParamWithType* ")"
		public Group getGroup() { return cGroup; }

		//{CEParamlist}
		public Action getCEParamlistAction_0() { return cCEParamlistAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//params+=ParamWithType*
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//ParamWithType
		public RuleCall getParamsParamWithTypeParserRuleCall_2_0() { return cParamsParamWithTypeParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ParamWithTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamWithType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeAbstractAtomicEventCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeAbstractAtomicEventIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeAbstractAtomicEventCrossReference_2_0.eContents().get(1);
		
		//ParamWithType:
		//
		//	name=ID ":" type=[AbstractAtomicEvent];
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=[AbstractAtomicEvent]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=[AbstractAtomicEvent]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[AbstractAtomicEvent]
		public CrossReference getTypeAbstractAtomicEventCrossReference_2_0() { return cTypeAbstractAtomicEventCrossReference_2_0; }

		//ID
		public RuleCall getTypeAbstractAtomicEventIDTerminalRuleCall_2_0_1() { return cTypeAbstractAtomicEventIDTerminalRuleCall_2_0_1; }
	}

	public class ParameterFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeNameIDTerminalRuleCall_0_0 = (RuleCall)cAttributeNameAssignment_0.eContents().get(0);
		private final Assignment cParamFilterRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamFilterRuleParameterFilterRuleParserRuleCall_1_0 = (RuleCall)cParamFilterRuleAssignment_1.eContents().get(0);
		
		//ParameterFilter:
		//
		//	attributeName=ID paramFilterRule=ParameterFilterRule;
		public ParserRule getRule() { return rule; }

		//attributeName=ID paramFilterRule=ParameterFilterRule
		public Group getGroup() { return cGroup; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_0() { return cAttributeNameAssignment_0; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_0_0() { return cAttributeNameIDTerminalRuleCall_0_0; }

		//paramFilterRule=ParameterFilterRule
		public Assignment getParamFilterRuleAssignment_1() { return cParamFilterRuleAssignment_1; }

		//ParameterFilterRule
		public RuleCall getParamFilterRuleParameterFilterRuleParserRuleCall_1_0() { return cParamFilterRuleParameterFilterRuleParserRuleCall_1_0; }
	}

	public class IQPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQPattern");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//IQPattern:
		//
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class AnnotationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContextAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSamplingAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPriorityAnnotationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Annotations:
		//
		//	ContextAnnotation | SamplingAnnotation | PriorityAnnotation;
		public ParserRule getRule() { return rule; }

		//ContextAnnotation | SamplingAnnotation | PriorityAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContextAnnotation
		public RuleCall getContextAnnotationParserRuleCall_0() { return cContextAnnotationParserRuleCall_0; }

		//SamplingAnnotation
		public RuleCall getSamplingAnnotationParserRuleCall_1() { return cSamplingAnnotationParserRuleCall_1; }

		//PriorityAnnotation
		public RuleCall getPriorityAnnotationParserRuleCall_2() { return cPriorityAnnotationParserRuleCall_2; }
	}

	public class ContextAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextContextEnumRuleCall_2_0 = (RuleCall)cContextAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContextAnnotation:
		//
		//	"@Context" "(" context=Context ")";
		public ParserRule getRule() { return rule; }

		//"@Context" "(" context=Context ")"
		public Group getGroup() { return cGroup; }

		//"@Context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//context=Context
		public Assignment getContextAssignment_2() { return cContextAssignment_2; }

		//Context
		public RuleCall getContextContextEnumRuleCall_2_0() { return cContextContextEnumRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SamplingAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SamplingAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSamplingTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSamplingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSamplingINTTerminalRuleCall_2_0 = (RuleCall)cSamplingAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SamplingAnnotation:
		//
		//	"@SamplingTime" "(" sampling=INT ")";
		public ParserRule getRule() { return rule; }

		//"@SamplingTime" "(" sampling=INT ")"
		public Group getGroup() { return cGroup; }

		//"@SamplingTime"
		public Keyword getSamplingTimeKeyword_0() { return cSamplingTimeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//sampling=INT
		public Assignment getSamplingAssignment_2() { return cSamplingAssignment_2; }

		//INT
		public RuleCall getSamplingINTTerminalRuleCall_2_0() { return cSamplingINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PriorityAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PriorityAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPriorityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPriorityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriorityINTTerminalRuleCall_2_0 = (RuleCall)cPriorityAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PriorityAnnotation:
		//
		//	"@Priority" "(" priority=INT ")";
		public ParserRule getRule() { return rule; }

		//"@Priority" "(" priority=INT ")"
		public Group getGroup() { return cGroup; }

		//"@Priority"
		public Keyword getPriorityKeyword_0() { return cPriorityKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//priority=INT
		public Assignment getPriorityAssignment_2() { return cPriorityAssignment_2; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_2_0() { return cPriorityINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ParameterFilterRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterFilterRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericFilterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParameterFilterRule:
		//
		//	RangeFilter | NumericFilter | LiteralFilter;
		public ParserRule getRule() { return rule; }

		//RangeFilter | NumericFilter | LiteralFilter
		public Alternatives getAlternatives() { return cAlternatives; }

		//RangeFilter
		public RuleCall getRangeFilterParserRuleCall_0() { return cRangeFilterParserRuleCall_0; }

		//NumericFilter
		public RuleCall getNumericFilterParserRuleCall_1() { return cNumericFilterParserRuleCall_1; }

		//LiteralFilter
		public RuleCall getLiteralFilterParserRuleCall_2() { return cLiteralFilterParserRuleCall_2; }
	}

	public class RangeFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegNegationOpartorParserRuleCall_0_0 = (RuleCall)cNegAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		
		//RangeFilter:
		//
		//	neg=NegationOpartor? "in" range=Range;
		public ParserRule getRule() { return rule; }

		//neg=NegationOpartor? "in" range=Range
		public Group getGroup() { return cGroup; }

		//neg=NegationOpartor?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }

		//NegationOpartor
		public RuleCall getNegNegationOpartorParserRuleCall_0_0() { return cNegNegationOpartorParserRuleCall_0_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//range=Range
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0() { return cRangeRangeParserRuleCall_2_0; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenOpenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOpenClosedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClosedClosedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClosedOpenParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Range:
		//
		//	OpenOpen | OpenClosed | ClosedClosed | ClosedOpen;
		public ParserRule getRule() { return rule; }

		//OpenOpen | OpenClosed | ClosedClosed | ClosedOpen
		public Alternatives getAlternatives() { return cAlternatives; }

		//OpenOpen
		public RuleCall getOpenOpenParserRuleCall_0() { return cOpenOpenParserRuleCall_0; }

		//OpenClosed
		public RuleCall getOpenClosedParserRuleCall_1() { return cOpenClosedParserRuleCall_1; }

		//ClosedClosed
		public RuleCall getClosedClosedParserRuleCall_2() { return cClosedClosedParserRuleCall_2; }

		//ClosedOpen
		public RuleCall getClosedOpenParserRuleCall_3() { return cClosedOpenParserRuleCall_3; }
	}

	public class OpenOpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenOpen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpenOpen:
		//
		//	"(" lowerBound=DOUBLE "," upperBound=DOUBLE ")";
		public ParserRule getRule() { return rule; }

		//"(" lowerBound=DOUBLE "," upperBound=DOUBLE ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class OpenClosedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenClosed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpenClosed:
		//
		//	"(" lowerBound=DOUBLE "," upperBound=DOUBLE "]";
		public ParserRule getRule() { return rule; }

		//"(" lowerBound=DOUBLE "," upperBound=DOUBLE "]"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ClosedClosedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosedClosed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClosedClosed:
		//
		//	"[" lowerBound=DOUBLE "," upperBound=DOUBLE ")";
		public ParserRule getRule() { return rule; }

		//"[" lowerBound=DOUBLE "," upperBound=DOUBLE ")"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ClosedOpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosedOpen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClosedOpen:
		//
		//	"[" lowerBound=DOUBLE "," upperBound=DOUBLE "]";
		public ParserRule getRule() { return rule; }

		//"[" lowerBound=DOUBLE "," upperBound=DOUBLE "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class NumericFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorNumericOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDOUBLEParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumericFilter:
		//
		//	operator=NumericOperator value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//operator=NumericOperator value=DOUBLE
		public Group getGroup() { return cGroup; }

		//operator=NumericOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//NumericOperator
		public RuleCall getOperatorNumericOperatorParserRuleCall_0_0() { return cOperatorNumericOperatorParserRuleCall_0_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_1_0() { return cValueDOUBLEParserRuleCall_1_0; }
	}

	public class NumericOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//NumericOperator:
		//
		//	"<" | "=<" | "==" | "!=" | ">=" | ">";
		public ParserRule getRule() { return rule; }

		//"<" | "=<" | "==" | "!=" | ">=" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"=<"
		public Keyword getEqualsSignLessThanSignKeyword_1() { return cEqualsSignLessThanSignKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_3() { return cExclamationMarkEqualsSignKeyword_3; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}

	public class LiteralFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegNegationOpartorParserRuleCall_0_0 = (RuleCall)cNegAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorLiteralOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//LiteralFilter:
		//
		//	neg=NegationOpartor? operator=LiteralOperator value=STRING;
		public ParserRule getRule() { return rule; }

		//neg=NegationOpartor? operator=LiteralOperator value=STRING
		public Group getGroup() { return cGroup; }

		//neg=NegationOpartor?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }

		//NegationOpartor
		public RuleCall getNegNegationOpartorParserRuleCall_0_0() { return cNegNegationOpartorParserRuleCall_0_0; }

		//operator=LiteralOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//LiteralOperator
		public RuleCall getOperatorLiteralOperatorParserRuleCall_1_0() { return cOperatorLiteralOperatorParserRuleCall_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class LiteralOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStartsWithKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEndsWithKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//LiteralOperator:
		//
		//	"contains" | "startsWith" | "endsWith";
		public ParserRule getRule() { return rule; }

		//"contains" | "startsWith" | "endsWith"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"contains"
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }

		//"startsWith"
		public Keyword getStartsWithKeyword_1() { return cStartsWithKeyword_1; }

		//"endsWith"
		public Keyword getEndsWithKeyword_2() { return cEndsWithKeyword_2; }
	}

	public class NegationOpartorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegationOpartor");
		private final Keyword cNotKeyword = (Keyword)rule.eContents().get(1);
		
		//NegationOpartor:
		//
		//	"not";
		public ParserRule getRule() { return rule; }

		//"not"
		public Keyword getNotKeyword() { return cNotKeyword; }
	}
	
	
	public class IQPatternChangeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "IQPatternChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFOUNDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFOUNDFOUNDKeyword_0_0 = (Keyword)cFOUNDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOSTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOSTLOSTKeyword_1_0 = (Keyword)cLOSTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IQPatternChangeType:
		//
		//	FOUND | LOST;
		public EnumRule getRule() { return rule; }

		//FOUND | LOST
		public Alternatives getAlternatives() { return cAlternatives; }

		//FOUND
		public EnumLiteralDeclaration getFOUNDEnumLiteralDeclaration_0() { return cFOUNDEnumLiteralDeclaration_0; }

		//"FOUND"
		public Keyword getFOUNDFOUNDKeyword_0_0() { return cFOUNDFOUNDKeyword_0_0; }

		//LOST
		public EnumLiteralDeclaration getLOSTEnumLiteralDeclaration_1() { return cLOSTEnumLiteralDeclaration_1; }

		//"LOST"
		public Keyword getLOSTLOSTKeyword_1_0() { return cLOSTLOSTKeyword_1_0; }
	}

	public class ContextElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cChronicleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cChronicleChronicleKeyword_0_0 = (Keyword)cChronicleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRecentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRecentRecentKeyword_1_0 = (Keyword)cRecentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUnrestrictedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUnrestrictedUnrestrictedKeyword_2_0 = (Keyword)cUnrestrictedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Context:
		//
		//	Chronicle | Recent | Unrestricted;
		public EnumRule getRule() { return rule; }

		//Chronicle | Recent | Unrestricted
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chronicle
		public EnumLiteralDeclaration getChronicleEnumLiteralDeclaration_0() { return cChronicleEnumLiteralDeclaration_0; }

		//"Chronicle"
		public Keyword getChronicleChronicleKeyword_0_0() { return cChronicleChronicleKeyword_0_0; }

		//Recent
		public EnumLiteralDeclaration getRecentEnumLiteralDeclaration_1() { return cRecentEnumLiteralDeclaration_1; }

		//"Recent"
		public Keyword getRecentRecentKeyword_1_0() { return cRecentRecentKeyword_1_0; }

		//Unrestricted
		public EnumLiteralDeclaration getUnrestrictedEnumLiteralDeclaration_2() { return cUnrestrictedEnumLiteralDeclaration_2; }

		//"Unrestricted"
		public Keyword getUnrestrictedUnrestrictedKeyword_2_0() { return cUnrestrictedUnrestrictedKeyword_2_0; }
	}
	
	private PackageDeclarationElements pPackageDeclaration;
	private DOUBLEElements pDOUBLE;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private UsageElements pUsage;
	private IQUsageElements pIQUsage;
	private EventSourceUsageElements pEventSourceUsage;
	private ModelElements pModel;
	private EventElements pEvent;
	private AbstractAtomicEventElements pAbstractAtomicEvent;
	private AtomicEventElements pAtomicEvent;
	private IQPatternEventElements pIQPatternEvent;
	private ComplexEventElements pComplexEvent;
	private CEParamlistElements pCEParamlist;
	private ParamWithTypeElements pParamWithType;
	private ParameterFilterElements pParameterFilter;
	private IQPatternChangeTypeElements unknownRuleIQPatternChangeType;
	private IQPatternElements pIQPattern;
	private AnnotationsElements pAnnotations;
	private ContextAnnotationElements pContextAnnotation;
	private ContextElements unknownRuleContext;
	private SamplingAnnotationElements pSamplingAnnotation;
	private PriorityAnnotationElements pPriorityAnnotation;
	private ParameterFilterRuleElements pParameterFilterRule;
	private RangeFilterElements pRangeFilter;
	private RangeElements pRange;
	private OpenOpenElements pOpenOpen;
	private OpenClosedElements pOpenClosed;
	private ClosedClosedElements pClosedClosed;
	private ClosedOpenElements pClosedOpen;
	private NumericFilterElements pNumericFilter;
	private NumericOperatorElements pNumericOperator;
	private LiteralFilterElements pLiteralFilter;
	private LiteralOperatorElements pLiteralOperator;
	private NegationOpartorElements pNegationOpartor;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EdlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.incquery.vedl.Edl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PackageDeclaration:
	//
	//	"package" name=QualifiedName usages+=Usage* model=Model;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//DOUBLE:
	//
	//	INT ("." INT)?;
	public DOUBLEElements getDOUBLEAccess() {
		return (pDOUBLE != null) ? pDOUBLE : (pDOUBLE = new DOUBLEElements());
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	//QualifiedName:
	//
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//Usage:
	//
	//	IQUsage | EventSourceUsage;
	public UsageElements getUsageAccess() {
		return (pUsage != null) ? pUsage : (pUsage = new UsageElements());
	}
	
	public ParserRule getUsageRule() {
		return getUsageAccess().getRule();
	}

	//IQUsage:
	//
	//	"uses-incquery-patterns" importedNamespace=QualifiedNameWithWildcard;
	public IQUsageElements getIQUsageAccess() {
		return (pIQUsage != null) ? pIQUsage : (pIQUsage = new IQUsageElements());
	}
	
	public ParserRule getIQUsageRule() {
		return getIQUsageAccess().getRule();
	}

	//EventSourceUsage:
	//
	//	"uses-eventsources" importedNamespace=QualifiedNameWithWildcard;
	public EventSourceUsageElements getEventSourceUsageAccess() {
		return (pEventSourceUsage != null) ? pEventSourceUsage : (pEventSourceUsage = new EventSourceUsageElements());
	}
	
	public ParserRule getEventSourceUsageRule() {
		return getEventSourceUsageAccess().getRule();
	}

	//Model hidden(WS, ML_COMMENT, SL_COMMENT):
	//
	//	annotations+=Annotations* "EventModel" name=ID "{" events+=Event* "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Event:
	//
	//	AbstractAtomicEvent | ComplexEvent;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//AbstractAtomicEvent:
	//
	//	AtomicEvent | IQPatternEvent;
	public AbstractAtomicEventElements getAbstractAtomicEventAccess() {
		return (pAbstractAtomicEvent != null) ? pAbstractAtomicEvent : (pAbstractAtomicEvent = new AbstractAtomicEventElements());
	}
	
	public ParserRule getAbstractAtomicEventRule() {
		return getAbstractAtomicEventAccess().getRule();
	}

	//AtomicEvent:
	//
	//	annotations+=Annotations* "AtomicEvent" name=ID "()" "{" "source" ":" source=[srct::Source] "id" ":" id=STRING
	//
	//	"parameterFilters" "{" parameterFilters+=ParameterFilter+ "}" "}";
	public AtomicEventElements getAtomicEventAccess() {
		return (pAtomicEvent != null) ? pAtomicEvent : (pAtomicEvent = new AtomicEventElements());
	}
	
	public ParserRule getAtomicEventRule() {
		return getAtomicEventAccess().getRule();
	}

	//IQPatternEvent:
	//
	//	"IQPatternEvent" name=ID "()" "{" "IQPatternRef" ":" iqpattern=IQPattern "ChangeType" ":"
	//
	//	changeType=IQPatternChangeType "}";
	public IQPatternEventElements getIQPatternEventAccess() {
		return (pIQPatternEvent != null) ? pIQPatternEvent : (pIQPatternEvent = new IQPatternEventElements());
	}
	
	public ParserRule getIQPatternEventRule() {
		return getIQPatternEventAccess().getRule();
	}

	//ComplexEvent:
	//
	//	annotations+=Annotations* "ComplexEvent" name=ID paramlist=CEParamlist "{" "}";
	public ComplexEventElements getComplexEventAccess() {
		return (pComplexEvent != null) ? pComplexEvent : (pComplexEvent = new ComplexEventElements());
	}
	
	public ParserRule getComplexEventRule() {
		return getComplexEventAccess().getRule();
	}

	//CEParamlist:
	//
	//	{CEParamlist} "(" params+=ParamWithType* ")";
	public CEParamlistElements getCEParamlistAccess() {
		return (pCEParamlist != null) ? pCEParamlist : (pCEParamlist = new CEParamlistElements());
	}
	
	public ParserRule getCEParamlistRule() {
		return getCEParamlistAccess().getRule();
	}

	//ParamWithType:
	//
	//	name=ID ":" type=[AbstractAtomicEvent];
	public ParamWithTypeElements getParamWithTypeAccess() {
		return (pParamWithType != null) ? pParamWithType : (pParamWithType = new ParamWithTypeElements());
	}
	
	public ParserRule getParamWithTypeRule() {
		return getParamWithTypeAccess().getRule();
	}

	//ParameterFilter:
	//
	//	attributeName=ID paramFilterRule=ParameterFilterRule;
	public ParameterFilterElements getParameterFilterAccess() {
		return (pParameterFilter != null) ? pParameterFilter : (pParameterFilter = new ParameterFilterElements());
	}
	
	public ParserRule getParameterFilterRule() {
		return getParameterFilterAccess().getRule();
	}

	//enum IQPatternChangeType:
	//
	//	FOUND | LOST;
	public IQPatternChangeTypeElements getIQPatternChangeTypeAccess() {
		return (unknownRuleIQPatternChangeType != null) ? unknownRuleIQPatternChangeType : (unknownRuleIQPatternChangeType = new IQPatternChangeTypeElements());
	}
	
	public EnumRule getIQPatternChangeTypeRule() {
		return getIQPatternChangeTypeAccess().getRule();
	}

	//IQPattern:
	//
	//	name=ID;
	public IQPatternElements getIQPatternAccess() {
		return (pIQPattern != null) ? pIQPattern : (pIQPattern = new IQPatternElements());
	}
	
	public ParserRule getIQPatternRule() {
		return getIQPatternAccess().getRule();
	}

	//Annotations:
	//
	//	ContextAnnotation | SamplingAnnotation | PriorityAnnotation;
	public AnnotationsElements getAnnotationsAccess() {
		return (pAnnotations != null) ? pAnnotations : (pAnnotations = new AnnotationsElements());
	}
	
	public ParserRule getAnnotationsRule() {
		return getAnnotationsAccess().getRule();
	}

	//ContextAnnotation:
	//
	//	"@Context" "(" context=Context ")";
	public ContextAnnotationElements getContextAnnotationAccess() {
		return (pContextAnnotation != null) ? pContextAnnotation : (pContextAnnotation = new ContextAnnotationElements());
	}
	
	public ParserRule getContextAnnotationRule() {
		return getContextAnnotationAccess().getRule();
	}

	//enum Context:
	//
	//	Chronicle | Recent | Unrestricted;
	public ContextElements getContextAccess() {
		return (unknownRuleContext != null) ? unknownRuleContext : (unknownRuleContext = new ContextElements());
	}
	
	public EnumRule getContextRule() {
		return getContextAccess().getRule();
	}

	//SamplingAnnotation:
	//
	//	"@SamplingTime" "(" sampling=INT ")";
	public SamplingAnnotationElements getSamplingAnnotationAccess() {
		return (pSamplingAnnotation != null) ? pSamplingAnnotation : (pSamplingAnnotation = new SamplingAnnotationElements());
	}
	
	public ParserRule getSamplingAnnotationRule() {
		return getSamplingAnnotationAccess().getRule();
	}

	//PriorityAnnotation:
	//
	//	"@Priority" "(" priority=INT ")";
	public PriorityAnnotationElements getPriorityAnnotationAccess() {
		return (pPriorityAnnotation != null) ? pPriorityAnnotation : (pPriorityAnnotation = new PriorityAnnotationElements());
	}
	
	public ParserRule getPriorityAnnotationRule() {
		return getPriorityAnnotationAccess().getRule();
	}

	//ParameterFilterRule:
	//
	//	RangeFilter | NumericFilter | LiteralFilter;
	public ParameterFilterRuleElements getParameterFilterRuleAccess() {
		return (pParameterFilterRule != null) ? pParameterFilterRule : (pParameterFilterRule = new ParameterFilterRuleElements());
	}
	
	public ParserRule getParameterFilterRuleRule() {
		return getParameterFilterRuleAccess().getRule();
	}

	//RangeFilter:
	//
	//	neg=NegationOpartor? "in" range=Range;
	public RangeFilterElements getRangeFilterAccess() {
		return (pRangeFilter != null) ? pRangeFilter : (pRangeFilter = new RangeFilterElements());
	}
	
	public ParserRule getRangeFilterRule() {
		return getRangeFilterAccess().getRule();
	}

	//Range:
	//
	//	OpenOpen | OpenClosed | ClosedClosed | ClosedOpen;
	public RangeElements getRangeAccess() {
		return (pRange != null) ? pRange : (pRange = new RangeElements());
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//OpenOpen:
	//
	//	"(" lowerBound=DOUBLE "," upperBound=DOUBLE ")";
	public OpenOpenElements getOpenOpenAccess() {
		return (pOpenOpen != null) ? pOpenOpen : (pOpenOpen = new OpenOpenElements());
	}
	
	public ParserRule getOpenOpenRule() {
		return getOpenOpenAccess().getRule();
	}

	//OpenClosed:
	//
	//	"(" lowerBound=DOUBLE "," upperBound=DOUBLE "]";
	public OpenClosedElements getOpenClosedAccess() {
		return (pOpenClosed != null) ? pOpenClosed : (pOpenClosed = new OpenClosedElements());
	}
	
	public ParserRule getOpenClosedRule() {
		return getOpenClosedAccess().getRule();
	}

	//ClosedClosed:
	//
	//	"[" lowerBound=DOUBLE "," upperBound=DOUBLE ")";
	public ClosedClosedElements getClosedClosedAccess() {
		return (pClosedClosed != null) ? pClosedClosed : (pClosedClosed = new ClosedClosedElements());
	}
	
	public ParserRule getClosedClosedRule() {
		return getClosedClosedAccess().getRule();
	}

	//ClosedOpen:
	//
	//	"[" lowerBound=DOUBLE "," upperBound=DOUBLE "]";
	public ClosedOpenElements getClosedOpenAccess() {
		return (pClosedOpen != null) ? pClosedOpen : (pClosedOpen = new ClosedOpenElements());
	}
	
	public ParserRule getClosedOpenRule() {
		return getClosedOpenAccess().getRule();
	}

	//NumericFilter:
	//
	//	operator=NumericOperator value=DOUBLE;
	public NumericFilterElements getNumericFilterAccess() {
		return (pNumericFilter != null) ? pNumericFilter : (pNumericFilter = new NumericFilterElements());
	}
	
	public ParserRule getNumericFilterRule() {
		return getNumericFilterAccess().getRule();
	}

	//NumericOperator:
	//
	//	"<" | "=<" | "==" | "!=" | ">=" | ">";
	public NumericOperatorElements getNumericOperatorAccess() {
		return (pNumericOperator != null) ? pNumericOperator : (pNumericOperator = new NumericOperatorElements());
	}
	
	public ParserRule getNumericOperatorRule() {
		return getNumericOperatorAccess().getRule();
	}

	//LiteralFilter:
	//
	//	neg=NegationOpartor? operator=LiteralOperator value=STRING;
	public LiteralFilterElements getLiteralFilterAccess() {
		return (pLiteralFilter != null) ? pLiteralFilter : (pLiteralFilter = new LiteralFilterElements());
	}
	
	public ParserRule getLiteralFilterRule() {
		return getLiteralFilterAccess().getRule();
	}

	//LiteralOperator:
	//
	//	"contains" | "startsWith" | "endsWith";
	public LiteralOperatorElements getLiteralOperatorAccess() {
		return (pLiteralOperator != null) ? pLiteralOperator : (pLiteralOperator = new LiteralOperatorElements());
	}
	
	public ParserRule getLiteralOperatorRule() {
		return getLiteralOperatorAccess().getRule();
	}

	//NegationOpartor:
	//
	//	"not";
	public NegationOpartorElements getNegationOpartorAccess() {
		return (pNegationOpartor != null) ? pNegationOpartor : (pNegationOpartor = new NegationOpartorElements());
	}
	
	public ParserRule getNegationOpartorRule() {
		return getNegationOpartorAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
