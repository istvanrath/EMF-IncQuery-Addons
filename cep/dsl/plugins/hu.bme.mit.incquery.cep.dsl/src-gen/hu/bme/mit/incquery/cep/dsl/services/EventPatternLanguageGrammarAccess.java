/*
* generated by Xtext
*/
package hu.bme.mit.incquery.cep.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EventPatternLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EventModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventModel");
		private final Assignment cPackagedModelAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagedModelPackagedModelParserRuleCall_0 = (RuleCall)cPackagedModelAssignment.eContents().get(0);
		
		//EventModel:
		//
		//	packagedModel=PackagedModel;
		public ParserRule getRule() { return rule; }

		//packagedModel=PackagedModel
		public Assignment getPackagedModelAssignment() { return cPackagedModelAssignment; }

		//PackagedModel
		public RuleCall getPackagedModelPackagedModelParserRuleCall_0() { return cPackagedModelPackagedModelParserRuleCall_0; }
	}

	public class PackagedModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackagedModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUsagesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsagesUsageParserRuleCall_2_0 = (RuleCall)cUsagesAssignment_2.eContents().get(0);
		private final Assignment cModelElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelElementsModelElementParserRuleCall_3_0 = (RuleCall)cModelElementsAssignment_3.eContents().get(0);
		
		//PackagedModel:
		//
		//	"package" name=QualifiedName usages+=Usage* modelElements+=ModelElement*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName usages+=Usage* modelElements+=ModelElement*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//usages+=Usage*
		public Assignment getUsagesAssignment_2() { return cUsagesAssignment_2; }

		//Usage
		public RuleCall getUsagesUsageParserRuleCall_2_0() { return cUsagesUsageParserRuleCall_2_0; }

		//modelElements+=ModelElement*
		public Assignment getModelElementsAssignment_3() { return cModelElementsAssignment_3; }

		//ModelElement
		public RuleCall getModelElementsModelElementParserRuleCall_3_0() { return cModelElementsModelElementParserRuleCall_3_0; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//DOUBLE returns ecore::EDouble:
		//
		//	"-"? INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class UsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Usage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Usage:
		//
		//	"uses" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"uses" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"uses"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSourceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ModelElement:
		//
		//	EventPattern | Rule | Source;
		public ParserRule getRule() { return rule; }

		//EventPattern | Rule | Source
		public Alternatives getAlternatives() { return cAlternatives; }

		//EventPattern
		public RuleCall getEventPatternParserRuleCall_0() { return cEventPatternParserRuleCall_0; }

		//Rule
		public RuleCall getRuleParserRuleCall_1() { return cRuleParserRuleCall_1; }

		//Source
		public RuleCall getSourceParserRuleCall_2() { return cSourceParserRuleCall_2; }
	}

	public class EventPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractAtomicEventPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexEventPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *******************************************MAIN MODEL ELEMENTS******************************************* /
		//
		//EventPattern:
		//
		//	AbstractAtomicEventPattern | ComplexEventPattern;
		public ParserRule getRule() { return rule; }

		//AbstractAtomicEventPattern | ComplexEventPattern
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractAtomicEventPattern
		public RuleCall getAbstractAtomicEventPatternParserRuleCall_0() { return cAbstractAtomicEventPatternParserRuleCall_0; }

		//ComplexEventPattern
		public RuleCall getComplexEventPatternParserRuleCall_1() { return cComplexEventPatternParserRuleCall_1; }
	}

	public class AbstractAtomicEventPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractAtomicEventPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicEventPatternParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIQPatternEventPatternParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractAtomicEventPattern:
		//
		//	AtomicEventPattern | IQPatternEventPattern;
		public ParserRule getRule() { return rule; }

		//AtomicEventPattern | IQPatternEventPattern
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtomicEventPattern
		public RuleCall getAtomicEventPatternParserRuleCall_0() { return cAtomicEventPatternParserRuleCall_0; }

		//IQPatternEventPattern
		public RuleCall getIQPatternEventPatternParserRuleCall_1() { return cIQPatternEventPatternParserRuleCall_1; }
	}

	public class AtomicEventPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicEventPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtomicEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersTypedParameterListParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSourceKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cSourceAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cSourceSourceCrossReference_6_2_0 = (CrossReference)cSourceAssignment_6_2.eContents().get(0);
		private final RuleCall cSourceSourceIDTerminalRuleCall_6_2_0_1 = (RuleCall)cSourceSourceCrossReference_6_2_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cStaticBindingsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStaticBindingsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStaticBindingsXBlockExpressionParserRuleCall_7_1_0 = (RuleCall)cStaticBindingsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AtomicEventPattern:
		//
		//	"AtomicEvent" name=ID "(" parameters=TypedParameterList? ")" "{" ("source" ":" source=[Source])? //		('staticBinding' '{'
		//
		//	//			staticBindings += StaticBinding*
		//
		//	//		'}')?
		//
		//	("staticBindings" staticBindings=XBlockExpression)? "}";
		public ParserRule getRule() { return rule; }

		//"AtomicEvent" name=ID "(" parameters=TypedParameterList? ")" "{" ("source" ":" source=[Source])? //		('staticBinding' '{'
		//
		////			staticBindings += StaticBinding*
		//
		////		'}')?
		//
		//("staticBindings" staticBindings=XBlockExpression)? "}"
		public Group getGroup() { return cGroup; }

		//"AtomicEvent"
		public Keyword getAtomicEventKeyword_0() { return cAtomicEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters=TypedParameterList?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//TypedParameterList
		public RuleCall getParametersTypedParameterListParserRuleCall_3_0() { return cParametersTypedParameterListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//("source" ":" source=[Source])?
		public Group getGroup_6() { return cGroup_6; }

		//"source"
		public Keyword getSourceKeyword_6_0() { return cSourceKeyword_6_0; }

		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//source=[Source]
		public Assignment getSourceAssignment_6_2() { return cSourceAssignment_6_2; }

		//[Source]
		public CrossReference getSourceSourceCrossReference_6_2_0() { return cSourceSourceCrossReference_6_2_0; }

		//ID
		public RuleCall getSourceSourceIDTerminalRuleCall_6_2_0_1() { return cSourceSourceIDTerminalRuleCall_6_2_0_1; }

		//("staticBindings" staticBindings=XBlockExpression)?
		public Group getGroup_7() { return cGroup_7; }

		//"staticBindings"
		public Keyword getStaticBindingsKeyword_7_0() { return cStaticBindingsKeyword_7_0; }

		//staticBindings=XBlockExpression
		public Assignment getStaticBindingsAssignment_7_1() { return cStaticBindingsAssignment_7_1; }

		//XBlockExpression
		public RuleCall getStaticBindingsXBlockExpressionParserRuleCall_7_1_0() { return cStaticBindingsXBlockExpressionParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class IQPatternEventPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IQPatternEventPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIQPatternEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersTypedParameterListParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cIqPatternRefKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cIqPatternRefAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIqPatternRefParametrizedIncQueryPatternReferenceParserRuleCall_8_0 = (RuleCall)cIqPatternRefAssignment_8.eContents().get(0);
		private final Keyword cIqChangeTypeKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cIqChangeTypeAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cIqChangeTypeIQPatternChangeTypeEnumRuleCall_11_0 = (RuleCall)cIqChangeTypeAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//IQPatternEventPattern:
		//
		//	"IQPatternEvent" name=ID "(" parameters=TypedParameterList? ")" "{" "iqPatternRef" ":"
		//
		//	iqPatternRef=ParametrizedIncQueryPatternReference "iqChangeType" ":" iqChangeType=IQPatternChangeType "}";
		public ParserRule getRule() { return rule; }

		//"IQPatternEvent" name=ID "(" parameters=TypedParameterList? ")" "{" "iqPatternRef" ":"
		//
		//iqPatternRef=ParametrizedIncQueryPatternReference "iqChangeType" ":" iqChangeType=IQPatternChangeType "}"
		public Group getGroup() { return cGroup; }

		//"IQPatternEvent"
		public Keyword getIQPatternEventKeyword_0() { return cIQPatternEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters=TypedParameterList?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//TypedParameterList
		public RuleCall getParametersTypedParameterListParserRuleCall_3_0() { return cParametersTypedParameterListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//"iqPatternRef"
		public Keyword getIqPatternRefKeyword_6() { return cIqPatternRefKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//iqPatternRef=ParametrizedIncQueryPatternReference
		public Assignment getIqPatternRefAssignment_8() { return cIqPatternRefAssignment_8; }

		//ParametrizedIncQueryPatternReference
		public RuleCall getIqPatternRefParametrizedIncQueryPatternReferenceParserRuleCall_8_0() { return cIqPatternRefParametrizedIncQueryPatternReferenceParserRuleCall_8_0; }

		//"iqChangeType"
		public Keyword getIqChangeTypeKeyword_9() { return cIqChangeTypeKeyword_9; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//iqChangeType=IQPatternChangeType
		public Assignment getIqChangeTypeAssignment_11() { return cIqChangeTypeAssignment_11; }

		//IQPatternChangeType
		public RuleCall getIqChangeTypeIQPatternChangeTypeEnumRuleCall_11_0() { return cIqChangeTypeIQPatternChangeTypeEnumRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class ComplexEventPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexEventPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComplexEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersTypedParameterListParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPriorityKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cPriorityAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cPriorityINTTerminalRuleCall_6_2_0 = (RuleCall)cPriorityAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDefinitionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cComplexEventExpressionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cComplexEventExpressionComplexEventExpressionParserRuleCall_7_2_0 = (RuleCall)cComplexEventExpressionAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ComplexEventPattern:
		//
		//	"ComplexEvent" name=ID "(" parameters=TypedParameterList? ")" "{" ("priority" ":" priority=INT)? ("definition" ":"
		//
		//	complexEventExpression=ComplexEventExpression)? "}";
		public ParserRule getRule() { return rule; }

		//"ComplexEvent" name=ID "(" parameters=TypedParameterList? ")" "{" ("priority" ":" priority=INT)? ("definition" ":"
		//
		//complexEventExpression=ComplexEventExpression)? "}"
		public Group getGroup() { return cGroup; }

		//"ComplexEvent"
		public Keyword getComplexEventKeyword_0() { return cComplexEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters=TypedParameterList?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//TypedParameterList
		public RuleCall getParametersTypedParameterListParserRuleCall_3_0() { return cParametersTypedParameterListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//("priority" ":" priority=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//"priority"
		public Keyword getPriorityKeyword_6_0() { return cPriorityKeyword_6_0; }

		//":"
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }

		//priority=INT
		public Assignment getPriorityAssignment_6_2() { return cPriorityAssignment_6_2; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_6_2_0() { return cPriorityINTTerminalRuleCall_6_2_0; }

		//("definition" ":" complexEventExpression=ComplexEventExpression)?
		public Group getGroup_7() { return cGroup_7; }

		//"definition"
		public Keyword getDefinitionKeyword_7_0() { return cDefinitionKeyword_7_0; }

		//":"
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }

		//complexEventExpression=ComplexEventExpression
		public Assignment getComplexEventExpressionAssignment_7_2() { return cComplexEventExpressionAssignment_7_2; }

		//ComplexEventExpression
		public RuleCall getComplexEventExpressionComplexEventExpressionParserRuleCall_7_2_0() { return cComplexEventExpressionComplexEventExpressionParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEventsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEventPatternsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cEventPatternsEventPatternCrossReference_5_0 = (CrossReference)cEventPatternsAssignment_5.eContents().get(0);
		private final RuleCall cEventPatternsEventPatternIDTerminalRuleCall_5_0_1 = (RuleCall)cEventPatternsEventPatternCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaSpaceKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cEventPatternsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cEventPatternsEventPatternCrossReference_6_1_0 = (CrossReference)cEventPatternsAssignment_6_1.eContents().get(0);
		private final RuleCall cEventPatternsEventPatternIDTerminalRuleCall_6_1_0_1 = (RuleCall)cEventPatternsEventPatternCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cActionHandlerKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cActionHandlerAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cActionHandlerQualifiedNameParserRuleCall_7_2_0 = (RuleCall)cActionHandlerAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cActionKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cActionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cActionXBlockExpressionParserRuleCall_8_1_0 = (RuleCall)cActionAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Rule:
		//
		//	"Rule" name=ID "{" "events" ":" eventPatterns+=[EventPattern] (", " eventPatterns+=[EventPattern])* ("actionHandler"
		//
		//	":" actionHandler=QualifiedName)? ("action" action=XBlockExpression)? "}";
		public ParserRule getRule() { return rule; }

		//"Rule" name=ID "{" "events" ":" eventPatterns+=[EventPattern] (", " eventPatterns+=[EventPattern])* ("actionHandler" ":"
		//
		//actionHandler=QualifiedName)? ("action" action=XBlockExpression)? "}"
		public Group getGroup() { return cGroup; }

		//"Rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"events"
		public Keyword getEventsKeyword_3() { return cEventsKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//eventPatterns+=[EventPattern]
		public Assignment getEventPatternsAssignment_5() { return cEventPatternsAssignment_5; }

		//[EventPattern]
		public CrossReference getEventPatternsEventPatternCrossReference_5_0() { return cEventPatternsEventPatternCrossReference_5_0; }

		//ID
		public RuleCall getEventPatternsEventPatternIDTerminalRuleCall_5_0_1() { return cEventPatternsEventPatternIDTerminalRuleCall_5_0_1; }

		//(", " eventPatterns+=[EventPattern])*
		public Group getGroup_6() { return cGroup_6; }

		//", "
		public Keyword getCommaSpaceKeyword_6_0() { return cCommaSpaceKeyword_6_0; }

		//eventPatterns+=[EventPattern]
		public Assignment getEventPatternsAssignment_6_1() { return cEventPatternsAssignment_6_1; }

		//[EventPattern]
		public CrossReference getEventPatternsEventPatternCrossReference_6_1_0() { return cEventPatternsEventPatternCrossReference_6_1_0; }

		//ID
		public RuleCall getEventPatternsEventPatternIDTerminalRuleCall_6_1_0_1() { return cEventPatternsEventPatternIDTerminalRuleCall_6_1_0_1; }

		//("actionHandler" ":" actionHandler=QualifiedName)?
		public Group getGroup_7() { return cGroup_7; }

		//"actionHandler"
		public Keyword getActionHandlerKeyword_7_0() { return cActionHandlerKeyword_7_0; }

		//":"
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }

		//actionHandler=QualifiedName
		public Assignment getActionHandlerAssignment_7_2() { return cActionHandlerAssignment_7_2; }

		//QualifiedName
		public RuleCall getActionHandlerQualifiedNameParserRuleCall_7_2_0() { return cActionHandlerQualifiedNameParserRuleCall_7_2_0; }

		//("action" action=XBlockExpression)?
		public Group getGroup_8() { return cGroup_8; }

		//"action"
		public Keyword getActionKeyword_8_0() { return cActionKeyword_8_0; }

		//action=XBlockExpression
		public Assignment getActionAssignment_8_1() { return cActionAssignment_8_1; }

		//XBlockExpression
		public RuleCall getActionXBlockExpressionParserRuleCall_8_1_0() { return cActionXBlockExpressionParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class TypedParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersTypedParameterParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaSpaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersTypedParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		
		/// *******************************************IQ PATTERN ELEMENTS******************************************* /
		//
		/// *******************************************FUNCTION ARGUMENT PARAMETERS******************************************* /
		//
		//TypedParameterList:
		//
		//	{TypedParameterList} parameters+=TypedParameter (", " parameters+=TypedParameter)*;
		public ParserRule getRule() { return rule; }

		//{TypedParameterList} parameters+=TypedParameter (", " parameters+=TypedParameter)*
		public Group getGroup() { return cGroup; }

		//{TypedParameterList}
		public Action getTypedParameterListAction_0() { return cTypedParameterListAction_0; }

		//parameters+=TypedParameter
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//TypedParameter
		public RuleCall getParametersTypedParameterParserRuleCall_1_0() { return cParametersTypedParameterParserRuleCall_1_0; }

		//(", " parameters+=TypedParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//", "
		public Keyword getCommaSpaceKeyword_2_0() { return cCommaSpaceKeyword_2_0; }

		//parameters+=TypedParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//TypedParameter
		public RuleCall getParametersTypedParameterParserRuleCall_2_1_0() { return cParametersTypedParameterParserRuleCall_2_1_0; }
	}

	public class TypedParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//TypedParameter:
		//
		//	{TypedParameter} name=ID ":" type=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//{TypedParameter} name=ID ":" type=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//{TypedParameter}
		public Action getTypedParameterAction_0() { return cTypedParameterAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_3_0() { return cTypeJvmTypeReferenceParserRuleCall_3_0; }
	}

	public class EventPatternParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventPatternParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventPatternParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersEventTypedParameterParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaSpaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersEventTypedParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		
		//EventPatternParameterList:
		//
		//	{EventPatternParameterList} parameters+=EventTypedParameter (", " parameters+=EventTypedParameter)*;
		public ParserRule getRule() { return rule; }

		//{EventPatternParameterList} parameters+=EventTypedParameter (", " parameters+=EventTypedParameter)*
		public Group getGroup() { return cGroup; }

		//{EventPatternParameterList}
		public Action getEventPatternParameterListAction_0() { return cEventPatternParameterListAction_0; }

		//parameters+=EventTypedParameter
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//EventTypedParameter
		public RuleCall getParametersEventTypedParameterParserRuleCall_1_0() { return cParametersEventTypedParameterParserRuleCall_1_0; }

		//(", " parameters+=EventTypedParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//", "
		public Keyword getCommaSpaceKeyword_2_0() { return cCommaSpaceKeyword_2_0; }

		//parameters+=EventTypedParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//EventTypedParameter
		public RuleCall getParametersEventTypedParameterParserRuleCall_2_1_0() { return cParametersEventTypedParameterParserRuleCall_2_1_0; }
	}

	public class EventTypedParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventTypedParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventTypedParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEventPatternCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEventPatternIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeEventPatternCrossReference_3_0.eContents().get(1);
		
		//EventTypedParameter:
		//
		//	{EventTypedParameter} name=ID ":" type=[EventPattern];
		public ParserRule getRule() { return rule; }

		//{EventTypedParameter} name=ID ":" type=[EventPattern]
		public Group getGroup() { return cGroup; }

		//{EventTypedParameter}
		public Action getEventTypedParameterAction_0() { return cEventTypedParameterAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[EventPattern]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[EventPattern]
		public CrossReference getTypeEventPatternCrossReference_3_0() { return cTypeEventPatternCrossReference_3_0; }

		//ID
		public RuleCall getTypeEventPatternIDTerminalRuleCall_3_0_1() { return cTypeEventPatternIDTerminalRuleCall_3_0_1; }
	}

	public class ParametrizedIncQueryPatternReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParametrizedIncQueryPatternReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIqpatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIqpatternPatternCrossReference_0_0 = (CrossReference)cIqpatternAssignment_0.eContents().get(0);
		private final RuleCall cIqpatternPatternIDTerminalRuleCall_0_0_1 = (RuleCall)cIqpatternPatternCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterListPatternCallParameterListParserRuleCall_1_1_0 = (RuleCall)cParameterListAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		/// *******************************************FUNCTION ARGUMEN PARAMETERS******************************************* /
		//
		/// *******************************************INCQUERY INTEGRATION******************************************* /
		//
		//ParametrizedIncQueryPatternReference:
		//
		//	iqpattern=[iqpl::Pattern] ("(" parameterList=PatternCallParameterList? ")")?;
		public ParserRule getRule() { return rule; }

		//iqpattern=[iqpl::Pattern] ("(" parameterList=PatternCallParameterList? ")")?
		public Group getGroup() { return cGroup; }

		//iqpattern=[iqpl::Pattern]
		public Assignment getIqpatternAssignment_0() { return cIqpatternAssignment_0; }

		//[iqpl::Pattern]
		public CrossReference getIqpatternPatternCrossReference_0_0() { return cIqpatternPatternCrossReference_0_0; }

		//ID
		public RuleCall getIqpatternPatternIDTerminalRuleCall_0_0_1() { return cIqpatternPatternIDTerminalRuleCall_0_0_1; }

		//("(" parameterList=PatternCallParameterList? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parameterList=PatternCallParameterList?
		public Assignment getParameterListAssignment_1_1() { return cParameterListAssignment_1_1; }

		//PatternCallParameterList
		public RuleCall getParameterListPatternCallParameterListParserRuleCall_1_1_0() { return cParameterListPatternCallParameterListParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMultiplicityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMultiplicityINTTerminalRuleCall_1_0 = (RuleCall)cMultiplicityAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *******************************************INCQUERY INTEGRATION******************************************* /
		//
		/// *******************************************COMPLEX EVENT EXPRESSIONS******************************************* /
		//
		//Multiplicity:
		//
		//	"{" multiplicity=INT "}";
		public ParserRule getRule() { return rule; }

		//"{" multiplicity=INT "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//multiplicity=INT
		public Assignment getMultiplicityAssignment_1() { return cMultiplicityAssignment_1; }

		//INT
		public RuleCall getMultiplicityINTTerminalRuleCall_1_0() { return cMultiplicityINTTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class TimewindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Timewindow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Timewindow:
		//
		//	"[" length=INT "]";
		public ParserRule getRule() { return rule; }

		//"[" length=INT "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//length=INT
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_1_0() { return cLengthINTTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class EventTypedParameterWithMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventTypedParameterWithMultiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventPatternEventPatternCrossReference_0_0 = (CrossReference)cEventPatternAssignment_0.eContents().get(0);
		private final RuleCall cEventPatternEventPatternIDTerminalRuleCall_0_0_1 = (RuleCall)cEventPatternEventPatternCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterListPatternCallParameterListParserRuleCall_1_1_0 = (RuleCall)cParameterListAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMultiplicityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_0 = (RuleCall)cMultiplicityAssignment_2.eContents().get(0);
		
		//EventTypedParameterWithMultiplicity:
		//
		//	eventPattern=[EventPattern] ("(" parameterList=PatternCallParameterList? ")")? multiplicity=Multiplicity?;
		public ParserRule getRule() { return rule; }

		//eventPattern=[EventPattern] ("(" parameterList=PatternCallParameterList? ")")? multiplicity=Multiplicity?
		public Group getGroup() { return cGroup; }

		//eventPattern=[EventPattern]
		public Assignment getEventPatternAssignment_0() { return cEventPatternAssignment_0; }

		//[EventPattern]
		public CrossReference getEventPatternEventPatternCrossReference_0_0() { return cEventPatternEventPatternCrossReference_0_0; }

		//ID
		public RuleCall getEventPatternEventPatternIDTerminalRuleCall_0_0_1() { return cEventPatternEventPatternIDTerminalRuleCall_0_0_1; }

		//("(" parameterList=PatternCallParameterList? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parameterList=PatternCallParameterList?
		public Assignment getParameterListAssignment_1_1() { return cParameterListAssignment_1_1; }

		//PatternCallParameterList
		public RuleCall getParameterListPatternCallParameterListParserRuleCall_1_1_0() { return cParameterListPatternCallParameterListParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//multiplicity=Multiplicity?
		public Assignment getMultiplicityAssignment_2() { return cMultiplicityAssignment_2; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_0() { return cMultiplicityMultiplicityParserRuleCall_2_0; }
	}

	public class PatternCallParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternCallParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatternCallParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersPatternCallParameterParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaSpaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersPatternCallParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		
		//PatternCallParameterList:
		//
		//	{PatternCallParameterList} parameters+=PatternCallParameter (", " parameters+=PatternCallParameter)*;
		public ParserRule getRule() { return rule; }

		//{PatternCallParameterList} parameters+=PatternCallParameter (", " parameters+=PatternCallParameter)*
		public Group getGroup() { return cGroup; }

		//{PatternCallParameterList}
		public Action getPatternCallParameterListAction_0() { return cPatternCallParameterListAction_0; }

		//parameters+=PatternCallParameter
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//PatternCallParameter
		public RuleCall getParametersPatternCallParameterParserRuleCall_1_0() { return cParametersPatternCallParameterParserRuleCall_1_0; }

		//(", " parameters+=PatternCallParameter)*
		public Group getGroup_2() { return cGroup_2; }

		//", "
		public Keyword getCommaSpaceKeyword_2_0() { return cCommaSpaceKeyword_2_0; }

		//parameters+=PatternCallParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//PatternCallParameter
		public RuleCall getParametersPatternCallParameterParserRuleCall_2_1_0() { return cParametersPatternCallParameterParserRuleCall_2_1_0; }
	}

	public class PatternCallParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternCallParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatternCallParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PatternCallParameter:
		//
		//	{PatternCallParameter} name=ID;
		public ParserRule getRule() { return rule; }

		//{PatternCallParameter} name=ID
		public Group getGroup() { return cGroup; }

		//{PatternCallParameter}
		public Action getPatternCallParameterAction_0() { return cPatternCallParameterAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ComplexEventExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexEventExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAugmentedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComplexEventExpression:
		//
		//	Expression | AugmentedExpression;
		public ParserRule getRule() { return rule; }

		//Expression | AugmentedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//AugmentedExpression
		public RuleCall getAugmentedExpressionParserRuleCall_1() { return cAugmentedExpressionParserRuleCall_1; }
	}

	public class AugmentedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AugmentedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimedExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiplicityExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTimedMultiplicityExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AugmentedExpression:
		//
		//	TimedExpression | MultiplicityExpression | TimedMultiplicityExpression;
		public ParserRule getRule() { return rule; }

		//TimedExpression | MultiplicityExpression | TimedMultiplicityExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//TimedExpression
		public RuleCall getTimedExpressionParserRuleCall_0() { return cTimedExpressionParserRuleCall_0; }

		//MultiplicityExpression
		public RuleCall getMultiplicityExpressionParserRuleCall_1() { return cMultiplicityExpressionParserRuleCall_1; }

		//TimedMultiplicityExpression
		public RuleCall getTimedMultiplicityExpressionParserRuleCall_2() { return cTimedMultiplicityExpressionParserRuleCall_2; }
	}

	public class TimedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTimewindowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimewindowTimewindowParserRuleCall_3_0 = (RuleCall)cTimewindowAssignment_3.eContents().get(0);
		
		//TimedExpression:
		//
		//	"(" expression=Expression ")" timewindow=Timewindow;
		public ParserRule getRule() { return rule; }

		//"(" expression=Expression ")" timewindow=Timewindow
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//timewindow=Timewindow
		public Assignment getTimewindowAssignment_3() { return cTimewindowAssignment_3; }

		//Timewindow
		public RuleCall getTimewindowTimewindowParserRuleCall_3_0() { return cTimewindowTimewindowParserRuleCall_3_0; }
	}

	public class MultiplicityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		
		//MultiplicityExpression:
		//
		//	"(" expression=Expression ")" multiplicity=Multiplicity;
		public ParserRule getRule() { return rule; }

		//"(" expression=Expression ")" multiplicity=Multiplicity
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_3_0() { return cMultiplicityMultiplicityParserRuleCall_3_0; }
	}

	public class TimedMultiplicityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimedMultiplicityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		private final Assignment cTimewindowAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimewindowTimewindowParserRuleCall_4_0 = (RuleCall)cTimewindowAssignment_4.eContents().get(0);
		
		//TimedMultiplicityExpression:
		//
		//	"(" expression=Expression ")" multiplicity=Multiplicity timewindow=Timewindow;
		public ParserRule getRule() { return rule; }

		//"(" expression=Expression ")" multiplicity=Multiplicity timewindow=Timewindow
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_3_0() { return cMultiplicityMultiplicityParserRuleCall_3_0; }

		//timewindow=Timewindow
		public Assignment getTimewindowAssignment_4() { return cTimewindowAssignment_4; }

		//Timewindow
		public RuleCall getTimewindowTimewindowParserRuleCall_4_0() { return cTimewindowTimewindowParserRuleCall_4_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFollowsExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBranchExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//
		//	FollowsExpression | BranchExpression;
		public ParserRule getRule() { return rule; }

		//FollowsExpression | BranchExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//FollowsExpression
		public RuleCall getFollowsExpressionParserRuleCall_0() { return cFollowsExpressionParserRuleCall_0; }

		//BranchExpression
		public RuleCall getBranchExpressionParserRuleCall_1() { return cBranchExpressionParserRuleCall_1; }
	}

	public class FollowsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFollowsExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEventPatternsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventPatternsEventTypedParameterWithMultiplicityParserRuleCall_1_0 = (RuleCall)cEventPatternsAssignment_1.eContents().get(0);
		private final Assignment cFollowerExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFollowerExpressionsFollowerExpressionParserRuleCall_2_0 = (RuleCall)cFollowerExpressionsAssignment_2.eContents().get(0);
		
		//FollowsExpression:
		//
		//	{FollowsExpression} eventPatterns+=EventTypedParameterWithMultiplicity followerExpressions+=FollowerExpression+;
		public ParserRule getRule() { return rule; }

		//{FollowsExpression} eventPatterns+=EventTypedParameterWithMultiplicity followerExpressions+=FollowerExpression+
		public Group getGroup() { return cGroup; }

		//{FollowsExpression}
		public Action getFollowsExpressionAction_0() { return cFollowsExpressionAction_0; }

		//eventPatterns+=EventTypedParameterWithMultiplicity
		public Assignment getEventPatternsAssignment_1() { return cEventPatternsAssignment_1; }

		//EventTypedParameterWithMultiplicity
		public RuleCall getEventPatternsEventTypedParameterWithMultiplicityParserRuleCall_1_0() { return cEventPatternsEventTypedParameterWithMultiplicityParserRuleCall_1_0; }

		//followerExpressions+=FollowerExpression+
		public Assignment getFollowerExpressionsAssignment_2() { return cFollowerExpressionsAssignment_2; }

		//FollowerExpression
		public RuleCall getFollowerExpressionsFollowerExpressionParserRuleCall_2_0() { return cFollowerExpressionsFollowerExpressionParserRuleCall_2_0; }
	}

	public class FollowerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFollowsOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFollowsOperatorFollowsOperatorParserRuleCall_0_0 = (RuleCall)cFollowsOperatorAssignment_0.eContents().get(0);
		private final Assignment cEventPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventPatternFollowerEventStructureParserRuleCall_1_0 = (RuleCall)cEventPatternAssignment_1.eContents().get(0);
		
		//FollowerExpression:
		//
		//	followsOperator=FollowsOperator eventPattern=FollowerEventStructure;
		public ParserRule getRule() { return rule; }

		//followsOperator=FollowsOperator eventPattern=FollowerEventStructure
		public Group getGroup() { return cGroup; }

		//followsOperator=FollowsOperator
		public Assignment getFollowsOperatorAssignment_0() { return cFollowsOperatorAssignment_0; }

		//FollowsOperator
		public RuleCall getFollowsOperatorFollowsOperatorParserRuleCall_0_0() { return cFollowsOperatorFollowsOperatorParserRuleCall_0_0; }

		//eventPattern=FollowerEventStructure
		public Assignment getEventPatternAssignment_1() { return cEventPatternAssignment_1; }

		//FollowerEventStructure
		public RuleCall getEventPatternFollowerEventStructureParserRuleCall_1_0() { return cEventPatternFollowerEventStructureParserRuleCall_1_0; }
	}

	public class FollowerEventStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowerEventStructure");
		private final RuleCall cEventTypedParameterWithMultiplicityParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FollowerEventStructure: //| InnerBranchExpression
		//
		//	EventTypedParameterWithMultiplicity;
		public ParserRule getRule() { return rule; }

		////| InnerBranchExpression
		//
		//EventTypedParameterWithMultiplicity
		public RuleCall getEventTypedParameterWithMultiplicityParserRuleCall() { return cEventTypedParameterWithMultiplicityParserRuleCall; }
	}

	public class InnerBranchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InnerBranchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionBranchExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InnerBranchExpression:
		//
		//	"(" expression=BranchExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=BranchExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=BranchExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//BranchExpression
		public RuleCall getExpressionBranchExpressionParserRuleCall_1_0() { return cExpressionBranchExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class BranchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BranchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBranchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEventPatternsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventPatternsEventTypedParameterWithMultiplicityParserRuleCall_1_0 = (RuleCall)cEventPatternsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cORKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEventPatternsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEventPatternsEventTypedParameterWithMultiplicityParserRuleCall_2_1_0 = (RuleCall)cEventPatternsAssignment_2_1.eContents().get(0);
		
		//BranchExpression:
		//
		//	{BranchExpression} eventPatterns+=EventTypedParameterWithMultiplicity ("OR"
		//
		//	eventPatterns+=EventTypedParameterWithMultiplicity)+;
		public ParserRule getRule() { return rule; }

		//{BranchExpression} eventPatterns+=EventTypedParameterWithMultiplicity ("OR"
		//
		//eventPatterns+=EventTypedParameterWithMultiplicity)+
		public Group getGroup() { return cGroup; }

		//{BranchExpression}
		public Action getBranchExpressionAction_0() { return cBranchExpressionAction_0; }

		//eventPatterns+=EventTypedParameterWithMultiplicity
		public Assignment getEventPatternsAssignment_1() { return cEventPatternsAssignment_1; }

		//EventTypedParameterWithMultiplicity
		public RuleCall getEventPatternsEventTypedParameterWithMultiplicityParserRuleCall_1_0() { return cEventPatternsEventTypedParameterWithMultiplicityParserRuleCall_1_0; }

		//("OR" eventPatterns+=EventTypedParameterWithMultiplicity)+
		public Group getGroup_2() { return cGroup_2; }

		//"OR"
		public Keyword getORKeyword_2_0() { return cORKeyword_2_0; }

		//eventPatterns+=EventTypedParameterWithMultiplicity
		public Assignment getEventPatternsAssignment_2_1() { return cEventPatternsAssignment_2_1; }

		//EventTypedParameterWithMultiplicity
		public RuleCall getEventPatternsEventTypedParameterWithMultiplicityParserRuleCall_2_1_0() { return cEventPatternsEventTypedParameterWithMultiplicityParserRuleCall_2_1_0; }
	}

	public class FollowsOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowsOperator");
		private final RuleCall cFollowsOperatorNoTWParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FollowsOperator: //| FollowsOperatorViaTW
		//
		//	FollowsOperatorNoTW;
		public ParserRule getRule() { return rule; }

		////| FollowsOperatorViaTW
		//
		//FollowsOperatorNoTW
		public RuleCall getFollowsOperatorNoTWParserRuleCall() { return cFollowsOperatorNoTWParserRuleCall; }
	}

	public class FollowsOperatorNoTWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowsOperatorNoTW");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFollowsOperatorNoTWAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FollowsOperatorNoTW:
		//
		//	{FollowsOperatorNoTW} "->";
		public ParserRule getRule() { return rule; }

		//{FollowsOperatorNoTW} "->"
		public Group getGroup() { return cGroup; }

		//{FollowsOperatorNoTW}
		public Action getFollowsOperatorNoTWAction_0() { return cFollowsOperatorNoTWAction_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
	}

	public class StaticBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterTypedParameterCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterTypedParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cParameterTypedParameterCrossReference_0_0.eContents().get(1);
		private final Assignment cBindingRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBindingRuleStaticBindingRuleParserRuleCall_1_0 = (RuleCall)cBindingRuleAssignment_1.eContents().get(0);
		
		////FollowsOperatorViaTW:
		//
		////        '-[' timewindow=INT ']->'
		//
		////;
		//
		/// *******************************************COMPLEX EVENT EXPRESSIONS******************************************* /
		//
		/// *******************************************STATIC BINDING ELEMENTS******************************************* /
		//
		//StaticBinding:
		//
		//	parameter=[TypedParameter] bindingRule=StaticBindingRule;
		public ParserRule getRule() { return rule; }

		//parameter=[TypedParameter] bindingRule=StaticBindingRule
		public Group getGroup() { return cGroup; }

		//parameter=[TypedParameter]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[TypedParameter]
		public CrossReference getParameterTypedParameterCrossReference_0_0() { return cParameterTypedParameterCrossReference_0_0; }

		//ID
		public RuleCall getParameterTypedParameterIDTerminalRuleCall_0_0_1() { return cParameterTypedParameterIDTerminalRuleCall_0_0_1; }

		//bindingRule=StaticBindingRule
		public Assignment getBindingRuleAssignment_1() { return cBindingRuleAssignment_1; }

		//StaticBindingRule
		public RuleCall getBindingRuleStaticBindingRuleParserRuleCall_1_0() { return cBindingRuleStaticBindingRuleParserRuleCall_1_0; }
	}

	public class StaticBindingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticBindingRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericFilterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StaticBindingRule:
		//
		//	RangeFilter | NumericFilter | LiteralFilter;
		public ParserRule getRule() { return rule; }

		//RangeFilter | NumericFilter | LiteralFilter
		public Alternatives getAlternatives() { return cAlternatives; }

		//RangeFilter
		public RuleCall getRangeFilterParserRuleCall_0() { return cRangeFilterParserRuleCall_0; }

		//NumericFilter
		public RuleCall getNumericFilterParserRuleCall_1() { return cNumericFilterParserRuleCall_1; }

		//LiteralFilter
		public RuleCall getLiteralFilterParserRuleCall_2() { return cLiteralFilterParserRuleCall_2; }
	}

	public class RangeFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegNegationOpartorParserRuleCall_0_0 = (RuleCall)cNegAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		
		//RangeFilter:
		//
		//	neg=NegationOpartor? "in" range=Range;
		public ParserRule getRule() { return rule; }

		//neg=NegationOpartor? "in" range=Range
		public Group getGroup() { return cGroup; }

		//neg=NegationOpartor?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }

		//NegationOpartor
		public RuleCall getNegNegationOpartorParserRuleCall_0_0() { return cNegNegationOpartorParserRuleCall_0_0; }

		//"in"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//range=Range
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0() { return cRangeRangeParserRuleCall_2_0; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenOpenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOpenClosedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClosedClosedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClosedOpenParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Range:
		//
		//	OpenOpen | OpenClosed | ClosedClosed | ClosedOpen;
		public ParserRule getRule() { return rule; }

		//OpenOpen | OpenClosed | ClosedClosed | ClosedOpen
		public Alternatives getAlternatives() { return cAlternatives; }

		//OpenOpen
		public RuleCall getOpenOpenParserRuleCall_0() { return cOpenOpenParserRuleCall_0; }

		//OpenClosed
		public RuleCall getOpenClosedParserRuleCall_1() { return cOpenClosedParserRuleCall_1; }

		//ClosedClosed
		public RuleCall getClosedClosedParserRuleCall_2() { return cClosedClosedParserRuleCall_2; }

		//ClosedOpen
		public RuleCall getClosedOpenParserRuleCall_3() { return cClosedOpenParserRuleCall_3; }
	}

	public class OpenOpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenOpen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpenOpen:
		//
		//	"(" lowerBound=DOUBLE ", " upperBound=DOUBLE ")";
		public ParserRule getRule() { return rule; }

		//"(" lowerBound=DOUBLE ", " upperBound=DOUBLE ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//", "
		public Keyword getCommaSpaceKeyword_2() { return cCommaSpaceKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class OpenClosedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenClosed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OpenClosed:
		//
		//	"(" lowerBound=DOUBLE ", " upperBound=DOUBLE "]";
		public ParserRule getRule() { return rule; }

		//"(" lowerBound=DOUBLE ", " upperBound=DOUBLE "]"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//", "
		public Keyword getCommaSpaceKeyword_2() { return cCommaSpaceKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ClosedClosedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosedClosed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClosedClosed:
		//
		//	"[" lowerBound=DOUBLE ", " upperBound=DOUBLE ")";
		public ParserRule getRule() { return rule; }

		//"[" lowerBound=DOUBLE ", " upperBound=DOUBLE ")"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//", "
		public Keyword getCommaSpaceKeyword_2() { return cCommaSpaceKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ClosedOpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosedOpen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cCommaSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClosedOpen:
		//
		//	"[" lowerBound=DOUBLE ", " upperBound=DOUBLE "]";
		public ParserRule getRule() { return rule; }

		//"[" lowerBound=DOUBLE ", " upperBound=DOUBLE "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//", "
		public Keyword getCommaSpaceKeyword_2() { return cCommaSpaceKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class NumericFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorNumericOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDOUBLEParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumericFilter:
		//
		//	operator=NumericOperator value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//operator=NumericOperator value=DOUBLE
		public Group getGroup() { return cGroup; }

		//operator=NumericOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//NumericOperator
		public RuleCall getOperatorNumericOperatorParserRuleCall_0_0() { return cOperatorNumericOperatorParserRuleCall_0_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_1_0() { return cValueDOUBLEParserRuleCall_1_0; }
	}

	public class NumericOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//NumericOperator:
		//
		//	"<" | "=<" | "==" | "!=" | ">=" | ">";
		public ParserRule getRule() { return rule; }

		//"<" | "=<" | "==" | "!=" | ">=" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"=<"
		public Keyword getEqualsSignLessThanSignKeyword_1() { return cEqualsSignLessThanSignKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_3() { return cExclamationMarkEqualsSignKeyword_3; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}

	public class LiteralFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegNegationOpartorParserRuleCall_0_0 = (RuleCall)cNegAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorLiteralOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//LiteralFilter:
		//
		//	neg=NegationOpartor? operator=LiteralOperator value=STRING;
		public ParserRule getRule() { return rule; }

		//neg=NegationOpartor? operator=LiteralOperator value=STRING
		public Group getGroup() { return cGroup; }

		//neg=NegationOpartor?
		public Assignment getNegAssignment_0() { return cNegAssignment_0; }

		//NegationOpartor
		public RuleCall getNegNegationOpartorParserRuleCall_0_0() { return cNegNegationOpartorParserRuleCall_0_0; }

		//operator=LiteralOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//LiteralOperator
		public RuleCall getOperatorLiteralOperatorParserRuleCall_1_0() { return cOperatorLiteralOperatorParserRuleCall_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class LiteralOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStartsWithKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEndsWithKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//LiteralOperator:
		//
		//	"contains" | "startsWith" | "endsWith";
		public ParserRule getRule() { return rule; }

		//"contains" | "startsWith" | "endsWith"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"contains"
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }

		//"startsWith"
		public Keyword getStartsWithKeyword_1() { return cStartsWithKeyword_1; }

		//"endsWith"
		public Keyword getEndsWithKeyword_2() { return cEndsWithKeyword_2; }
	}

	public class NegationOpartorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegationOpartor");
		private final Keyword cNotKeyword = (Keyword)rule.eContents().get(1);
		
		//NegationOpartor:
		//
		//	"not";
		public ParserRule getRule() { return rule; }

		//"not"
		public Keyword getNotKeyword() { return cNotKeyword; }
	}

	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRegisterKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAdapterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAdapterAdapterParserRuleCall_3_1_0 = (RuleCall)cAdapterAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *******************************************STATIC BINDING ELEMENTS******************************************* /
		//
		/// *******************************************STRUCTURAL/INTEGRATION FEATURES******************************************* /
		//
		//Source:
		//
		//	"Source" name=ID "{" ("register" adapter+=Adapter)+ "}";
		public ParserRule getRule() { return rule; }

		//"Source" name=ID "{" ("register" adapter+=Adapter)+ "}"
		public Group getGroup() { return cGroup; }

		//"Source"
		public Keyword getSourceKeyword_0() { return cSourceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("register" adapter+=Adapter)+
		public Group getGroup_3() { return cGroup_3; }

		//"register"
		public Keyword getRegisterKeyword_3_0() { return cRegisterKeyword_3_0; }

		//adapter+=Adapter
		public Assignment getAdapterAssignment_3_1() { return cAdapterAssignment_3_1; }

		//Adapter
		public RuleCall getAdapterAdapterParserRuleCall_3_1_0() { return cAdapterAdapterParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AdapterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Adapter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		/// *******************************************STRUCTURAL/INTEGRATION FEATURES******************************************* /
		//
		//Adapter:
		//
		//	name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//name=QualifiedName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0() { return cNameQualifiedNameParserRuleCall_0; }
	}
	
	
	public class IQPatternChangeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "IQPatternChangeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEW_MATCH_FOUNDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNEW_MATCH_FOUNDNEW_MATCH_FOUNDKeyword_0_0 = (Keyword)cNEW_MATCH_FOUNDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEXISTING_MATCH_LOSTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEXISTING_MATCH_LOSTEXISTING_MATCH_LOSTKeyword_1_0 = (Keyword)cEXISTING_MATCH_LOSTEnumLiteralDeclaration_1.eContents().get(0);
		
		/// *******************************************BASIC EVENT TYPE ELEMENTS******************************************* /
		//
		/// *******************************************IQ PATTERN ELEMENTS******************************************* / enum
		//
		//IQPatternChangeType:
		//
		//	NEW_MATCH_FOUND | EXISTING_MATCH_LOST;
		public EnumRule getRule() { return rule; }

		//NEW_MATCH_FOUND | EXISTING_MATCH_LOST
		public Alternatives getAlternatives() { return cAlternatives; }

		//NEW_MATCH_FOUND
		public EnumLiteralDeclaration getNEW_MATCH_FOUNDEnumLiteralDeclaration_0() { return cNEW_MATCH_FOUNDEnumLiteralDeclaration_0; }

		//"NEW_MATCH_FOUND"
		public Keyword getNEW_MATCH_FOUNDNEW_MATCH_FOUNDKeyword_0_0() { return cNEW_MATCH_FOUNDNEW_MATCH_FOUNDKeyword_0_0; }

		//EXISTING_MATCH_LOST
		public EnumLiteralDeclaration getEXISTING_MATCH_LOSTEnumLiteralDeclaration_1() { return cEXISTING_MATCH_LOSTEnumLiteralDeclaration_1; }

		//"EXISTING_MATCH_LOST"
		public Keyword getEXISTING_MATCH_LOSTEXISTING_MATCH_LOSTKeyword_1_0() { return cEXISTING_MATCH_LOSTEXISTING_MATCH_LOSTKeyword_1_0; }
	}
	
	private EventModelElements pEventModel;
	private PackagedModelElements pPackagedModel;
	private DOUBLEElements pDOUBLE;
	private UsageElements pUsage;
	private ModelElementElements pModelElement;
	private EventPatternElements pEventPattern;
	private AbstractAtomicEventPatternElements pAbstractAtomicEventPattern;
	private AtomicEventPatternElements pAtomicEventPattern;
	private IQPatternEventPatternElements pIQPatternEventPattern;
	private ComplexEventPatternElements pComplexEventPattern;
	private RuleElements pRule;
	private IQPatternChangeTypeElements unknownRuleIQPatternChangeType;
	private TypedParameterListElements pTypedParameterList;
	private TypedParameterElements pTypedParameter;
	private EventPatternParameterListElements pEventPatternParameterList;
	private EventTypedParameterElements pEventTypedParameter;
	private ParametrizedIncQueryPatternReferenceElements pParametrizedIncQueryPatternReference;
	private MultiplicityElements pMultiplicity;
	private TimewindowElements pTimewindow;
	private EventTypedParameterWithMultiplicityElements pEventTypedParameterWithMultiplicity;
	private PatternCallParameterListElements pPatternCallParameterList;
	private PatternCallParameterElements pPatternCallParameter;
	private ComplexEventExpressionElements pComplexEventExpression;
	private AugmentedExpressionElements pAugmentedExpression;
	private TimedExpressionElements pTimedExpression;
	private MultiplicityExpressionElements pMultiplicityExpression;
	private TimedMultiplicityExpressionElements pTimedMultiplicityExpression;
	private ExpressionElements pExpression;
	private FollowsExpressionElements pFollowsExpression;
	private FollowerExpressionElements pFollowerExpression;
	private FollowerEventStructureElements pFollowerEventStructure;
	private InnerBranchExpressionElements pInnerBranchExpression;
	private BranchExpressionElements pBranchExpression;
	private FollowsOperatorElements pFollowsOperator;
	private FollowsOperatorNoTWElements pFollowsOperatorNoTW;
	private StaticBindingElements pStaticBinding;
	private StaticBindingRuleElements pStaticBindingRule;
	private RangeFilterElements pRangeFilter;
	private RangeElements pRange;
	private OpenOpenElements pOpenOpen;
	private OpenClosedElements pOpenClosed;
	private ClosedClosedElements pClosedClosed;
	private ClosedOpenElements pClosedOpen;
	private NumericFilterElements pNumericFilter;
	private NumericOperatorElements pNumericOperator;
	private LiteralFilterElements pLiteralFilter;
	private LiteralOperatorElements pLiteralOperator;
	private NegationOpartorElements pNegationOpartor;
	private SourceElements pSource;
	private AdapterElements pAdapter;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public EventPatternLanguageGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.incquery.cep.dsl.EventPatternLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//EventModel:
	//
	//	packagedModel=PackagedModel;
	public EventModelElements getEventModelAccess() {
		return (pEventModel != null) ? pEventModel : (pEventModel = new EventModelElements());
	}
	
	public ParserRule getEventModelRule() {
		return getEventModelAccess().getRule();
	}

	//PackagedModel:
	//
	//	"package" name=QualifiedName usages+=Usage* modelElements+=ModelElement*;
	public PackagedModelElements getPackagedModelAccess() {
		return (pPackagedModel != null) ? pPackagedModel : (pPackagedModel = new PackagedModelElements());
	}
	
	public ParserRule getPackagedModelRule() {
		return getPackagedModelAccess().getRule();
	}

	//DOUBLE returns ecore::EDouble:
	//
	//	"-"? INT ("." INT)?;
	public DOUBLEElements getDOUBLEAccess() {
		return (pDOUBLE != null) ? pDOUBLE : (pDOUBLE = new DOUBLEElements());
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	//Usage:
	//
	//	"uses" importedNamespace=QualifiedNameWithWildcard;
	public UsageElements getUsageAccess() {
		return (pUsage != null) ? pUsage : (pUsage = new UsageElements());
	}
	
	public ParserRule getUsageRule() {
		return getUsageAccess().getRule();
	}

	//ModelElement:
	//
	//	EventPattern | Rule | Source;
	public ModelElementElements getModelElementAccess() {
		return (pModelElement != null) ? pModelElement : (pModelElement = new ModelElementElements());
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}

	/// *******************************************MAIN MODEL ELEMENTS******************************************* /
	//
	//EventPattern:
	//
	//	AbstractAtomicEventPattern | ComplexEventPattern;
	public EventPatternElements getEventPatternAccess() {
		return (pEventPattern != null) ? pEventPattern : (pEventPattern = new EventPatternElements());
	}
	
	public ParserRule getEventPatternRule() {
		return getEventPatternAccess().getRule();
	}

	//AbstractAtomicEventPattern:
	//
	//	AtomicEventPattern | IQPatternEventPattern;
	public AbstractAtomicEventPatternElements getAbstractAtomicEventPatternAccess() {
		return (pAbstractAtomicEventPattern != null) ? pAbstractAtomicEventPattern : (pAbstractAtomicEventPattern = new AbstractAtomicEventPatternElements());
	}
	
	public ParserRule getAbstractAtomicEventPatternRule() {
		return getAbstractAtomicEventPatternAccess().getRule();
	}

	//AtomicEventPattern:
	//
	//	"AtomicEvent" name=ID "(" parameters=TypedParameterList? ")" "{" ("source" ":" source=[Source])? //		('staticBinding' '{'
	//
	//	//			staticBindings += StaticBinding*
	//
	//	//		'}')?
	//
	//	("staticBindings" staticBindings=XBlockExpression)? "}";
	public AtomicEventPatternElements getAtomicEventPatternAccess() {
		return (pAtomicEventPattern != null) ? pAtomicEventPattern : (pAtomicEventPattern = new AtomicEventPatternElements());
	}
	
	public ParserRule getAtomicEventPatternRule() {
		return getAtomicEventPatternAccess().getRule();
	}

	//IQPatternEventPattern:
	//
	//	"IQPatternEvent" name=ID "(" parameters=TypedParameterList? ")" "{" "iqPatternRef" ":"
	//
	//	iqPatternRef=ParametrizedIncQueryPatternReference "iqChangeType" ":" iqChangeType=IQPatternChangeType "}";
	public IQPatternEventPatternElements getIQPatternEventPatternAccess() {
		return (pIQPatternEventPattern != null) ? pIQPatternEventPattern : (pIQPatternEventPattern = new IQPatternEventPatternElements());
	}
	
	public ParserRule getIQPatternEventPatternRule() {
		return getIQPatternEventPatternAccess().getRule();
	}

	//ComplexEventPattern:
	//
	//	"ComplexEvent" name=ID "(" parameters=TypedParameterList? ")" "{" ("priority" ":" priority=INT)? ("definition" ":"
	//
	//	complexEventExpression=ComplexEventExpression)? "}";
	public ComplexEventPatternElements getComplexEventPatternAccess() {
		return (pComplexEventPattern != null) ? pComplexEventPattern : (pComplexEventPattern = new ComplexEventPatternElements());
	}
	
	public ParserRule getComplexEventPatternRule() {
		return getComplexEventPatternAccess().getRule();
	}

	//Rule:
	//
	//	"Rule" name=ID "{" "events" ":" eventPatterns+=[EventPattern] (", " eventPatterns+=[EventPattern])* ("actionHandler"
	//
	//	":" actionHandler=QualifiedName)? ("action" action=XBlockExpression)? "}";
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	/// *******************************************BASIC EVENT TYPE ELEMENTS******************************************* /
	//
	/// *******************************************IQ PATTERN ELEMENTS******************************************* / enum
	//
	//IQPatternChangeType:
	//
	//	NEW_MATCH_FOUND | EXISTING_MATCH_LOST;
	public IQPatternChangeTypeElements getIQPatternChangeTypeAccess() {
		return (unknownRuleIQPatternChangeType != null) ? unknownRuleIQPatternChangeType : (unknownRuleIQPatternChangeType = new IQPatternChangeTypeElements());
	}
	
	public EnumRule getIQPatternChangeTypeRule() {
		return getIQPatternChangeTypeAccess().getRule();
	}

	/// *******************************************IQ PATTERN ELEMENTS******************************************* /
	//
	/// *******************************************FUNCTION ARGUMENT PARAMETERS******************************************* /
	//
	//TypedParameterList:
	//
	//	{TypedParameterList} parameters+=TypedParameter (", " parameters+=TypedParameter)*;
	public TypedParameterListElements getTypedParameterListAccess() {
		return (pTypedParameterList != null) ? pTypedParameterList : (pTypedParameterList = new TypedParameterListElements());
	}
	
	public ParserRule getTypedParameterListRule() {
		return getTypedParameterListAccess().getRule();
	}

	//TypedParameter:
	//
	//	{TypedParameter} name=ID ":" type=JvmTypeReference;
	public TypedParameterElements getTypedParameterAccess() {
		return (pTypedParameter != null) ? pTypedParameter : (pTypedParameter = new TypedParameterElements());
	}
	
	public ParserRule getTypedParameterRule() {
		return getTypedParameterAccess().getRule();
	}

	//EventPatternParameterList:
	//
	//	{EventPatternParameterList} parameters+=EventTypedParameter (", " parameters+=EventTypedParameter)*;
	public EventPatternParameterListElements getEventPatternParameterListAccess() {
		return (pEventPatternParameterList != null) ? pEventPatternParameterList : (pEventPatternParameterList = new EventPatternParameterListElements());
	}
	
	public ParserRule getEventPatternParameterListRule() {
		return getEventPatternParameterListAccess().getRule();
	}

	//EventTypedParameter:
	//
	//	{EventTypedParameter} name=ID ":" type=[EventPattern];
	public EventTypedParameterElements getEventTypedParameterAccess() {
		return (pEventTypedParameter != null) ? pEventTypedParameter : (pEventTypedParameter = new EventTypedParameterElements());
	}
	
	public ParserRule getEventTypedParameterRule() {
		return getEventTypedParameterAccess().getRule();
	}

	/// *******************************************FUNCTION ARGUMEN PARAMETERS******************************************* /
	//
	/// *******************************************INCQUERY INTEGRATION******************************************* /
	//
	//ParametrizedIncQueryPatternReference:
	//
	//	iqpattern=[iqpl::Pattern] ("(" parameterList=PatternCallParameterList? ")")?;
	public ParametrizedIncQueryPatternReferenceElements getParametrizedIncQueryPatternReferenceAccess() {
		return (pParametrizedIncQueryPatternReference != null) ? pParametrizedIncQueryPatternReference : (pParametrizedIncQueryPatternReference = new ParametrizedIncQueryPatternReferenceElements());
	}
	
	public ParserRule getParametrizedIncQueryPatternReferenceRule() {
		return getParametrizedIncQueryPatternReferenceAccess().getRule();
	}

	/// *******************************************INCQUERY INTEGRATION******************************************* /
	//
	/// *******************************************COMPLEX EVENT EXPRESSIONS******************************************* /
	//
	//Multiplicity:
	//
	//	"{" multiplicity=INT "}";
	public MultiplicityElements getMultiplicityAccess() {
		return (pMultiplicity != null) ? pMultiplicity : (pMultiplicity = new MultiplicityElements());
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}

	//Timewindow:
	//
	//	"[" length=INT "]";
	public TimewindowElements getTimewindowAccess() {
		return (pTimewindow != null) ? pTimewindow : (pTimewindow = new TimewindowElements());
	}
	
	public ParserRule getTimewindowRule() {
		return getTimewindowAccess().getRule();
	}

	//EventTypedParameterWithMultiplicity:
	//
	//	eventPattern=[EventPattern] ("(" parameterList=PatternCallParameterList? ")")? multiplicity=Multiplicity?;
	public EventTypedParameterWithMultiplicityElements getEventTypedParameterWithMultiplicityAccess() {
		return (pEventTypedParameterWithMultiplicity != null) ? pEventTypedParameterWithMultiplicity : (pEventTypedParameterWithMultiplicity = new EventTypedParameterWithMultiplicityElements());
	}
	
	public ParserRule getEventTypedParameterWithMultiplicityRule() {
		return getEventTypedParameterWithMultiplicityAccess().getRule();
	}

	//PatternCallParameterList:
	//
	//	{PatternCallParameterList} parameters+=PatternCallParameter (", " parameters+=PatternCallParameter)*;
	public PatternCallParameterListElements getPatternCallParameterListAccess() {
		return (pPatternCallParameterList != null) ? pPatternCallParameterList : (pPatternCallParameterList = new PatternCallParameterListElements());
	}
	
	public ParserRule getPatternCallParameterListRule() {
		return getPatternCallParameterListAccess().getRule();
	}

	//PatternCallParameter:
	//
	//	{PatternCallParameter} name=ID;
	public PatternCallParameterElements getPatternCallParameterAccess() {
		return (pPatternCallParameter != null) ? pPatternCallParameter : (pPatternCallParameter = new PatternCallParameterElements());
	}
	
	public ParserRule getPatternCallParameterRule() {
		return getPatternCallParameterAccess().getRule();
	}

	//ComplexEventExpression:
	//
	//	Expression | AugmentedExpression;
	public ComplexEventExpressionElements getComplexEventExpressionAccess() {
		return (pComplexEventExpression != null) ? pComplexEventExpression : (pComplexEventExpression = new ComplexEventExpressionElements());
	}
	
	public ParserRule getComplexEventExpressionRule() {
		return getComplexEventExpressionAccess().getRule();
	}

	//AugmentedExpression:
	//
	//	TimedExpression | MultiplicityExpression | TimedMultiplicityExpression;
	public AugmentedExpressionElements getAugmentedExpressionAccess() {
		return (pAugmentedExpression != null) ? pAugmentedExpression : (pAugmentedExpression = new AugmentedExpressionElements());
	}
	
	public ParserRule getAugmentedExpressionRule() {
		return getAugmentedExpressionAccess().getRule();
	}

	//TimedExpression:
	//
	//	"(" expression=Expression ")" timewindow=Timewindow;
	public TimedExpressionElements getTimedExpressionAccess() {
		return (pTimedExpression != null) ? pTimedExpression : (pTimedExpression = new TimedExpressionElements());
	}
	
	public ParserRule getTimedExpressionRule() {
		return getTimedExpressionAccess().getRule();
	}

	//MultiplicityExpression:
	//
	//	"(" expression=Expression ")" multiplicity=Multiplicity;
	public MultiplicityExpressionElements getMultiplicityExpressionAccess() {
		return (pMultiplicityExpression != null) ? pMultiplicityExpression : (pMultiplicityExpression = new MultiplicityExpressionElements());
	}
	
	public ParserRule getMultiplicityExpressionRule() {
		return getMultiplicityExpressionAccess().getRule();
	}

	//TimedMultiplicityExpression:
	//
	//	"(" expression=Expression ")" multiplicity=Multiplicity timewindow=Timewindow;
	public TimedMultiplicityExpressionElements getTimedMultiplicityExpressionAccess() {
		return (pTimedMultiplicityExpression != null) ? pTimedMultiplicityExpression : (pTimedMultiplicityExpression = new TimedMultiplicityExpressionElements());
	}
	
	public ParserRule getTimedMultiplicityExpressionRule() {
		return getTimedMultiplicityExpressionAccess().getRule();
	}

	//Expression:
	//
	//	FollowsExpression | BranchExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//FollowsExpression:
	//
	//	{FollowsExpression} eventPatterns+=EventTypedParameterWithMultiplicity followerExpressions+=FollowerExpression+;
	public FollowsExpressionElements getFollowsExpressionAccess() {
		return (pFollowsExpression != null) ? pFollowsExpression : (pFollowsExpression = new FollowsExpressionElements());
	}
	
	public ParserRule getFollowsExpressionRule() {
		return getFollowsExpressionAccess().getRule();
	}

	//FollowerExpression:
	//
	//	followsOperator=FollowsOperator eventPattern=FollowerEventStructure;
	public FollowerExpressionElements getFollowerExpressionAccess() {
		return (pFollowerExpression != null) ? pFollowerExpression : (pFollowerExpression = new FollowerExpressionElements());
	}
	
	public ParserRule getFollowerExpressionRule() {
		return getFollowerExpressionAccess().getRule();
	}

	//FollowerEventStructure: //| InnerBranchExpression
	//
	//	EventTypedParameterWithMultiplicity;
	public FollowerEventStructureElements getFollowerEventStructureAccess() {
		return (pFollowerEventStructure != null) ? pFollowerEventStructure : (pFollowerEventStructure = new FollowerEventStructureElements());
	}
	
	public ParserRule getFollowerEventStructureRule() {
		return getFollowerEventStructureAccess().getRule();
	}

	//InnerBranchExpression:
	//
	//	"(" expression=BranchExpression ")";
	public InnerBranchExpressionElements getInnerBranchExpressionAccess() {
		return (pInnerBranchExpression != null) ? pInnerBranchExpression : (pInnerBranchExpression = new InnerBranchExpressionElements());
	}
	
	public ParserRule getInnerBranchExpressionRule() {
		return getInnerBranchExpressionAccess().getRule();
	}

	//BranchExpression:
	//
	//	{BranchExpression} eventPatterns+=EventTypedParameterWithMultiplicity ("OR"
	//
	//	eventPatterns+=EventTypedParameterWithMultiplicity)+;
	public BranchExpressionElements getBranchExpressionAccess() {
		return (pBranchExpression != null) ? pBranchExpression : (pBranchExpression = new BranchExpressionElements());
	}
	
	public ParserRule getBranchExpressionRule() {
		return getBranchExpressionAccess().getRule();
	}

	//FollowsOperator: //| FollowsOperatorViaTW
	//
	//	FollowsOperatorNoTW;
	public FollowsOperatorElements getFollowsOperatorAccess() {
		return (pFollowsOperator != null) ? pFollowsOperator : (pFollowsOperator = new FollowsOperatorElements());
	}
	
	public ParserRule getFollowsOperatorRule() {
		return getFollowsOperatorAccess().getRule();
	}

	//FollowsOperatorNoTW:
	//
	//	{FollowsOperatorNoTW} "->";
	public FollowsOperatorNoTWElements getFollowsOperatorNoTWAccess() {
		return (pFollowsOperatorNoTW != null) ? pFollowsOperatorNoTW : (pFollowsOperatorNoTW = new FollowsOperatorNoTWElements());
	}
	
	public ParserRule getFollowsOperatorNoTWRule() {
		return getFollowsOperatorNoTWAccess().getRule();
	}

	////FollowsOperatorViaTW:
	//
	////        '-[' timewindow=INT ']->'
	//
	////;
	//
	/// *******************************************COMPLEX EVENT EXPRESSIONS******************************************* /
	//
	/// *******************************************STATIC BINDING ELEMENTS******************************************* /
	//
	//StaticBinding:
	//
	//	parameter=[TypedParameter] bindingRule=StaticBindingRule;
	public StaticBindingElements getStaticBindingAccess() {
		return (pStaticBinding != null) ? pStaticBinding : (pStaticBinding = new StaticBindingElements());
	}
	
	public ParserRule getStaticBindingRule() {
		return getStaticBindingAccess().getRule();
	}

	//StaticBindingRule:
	//
	//	RangeFilter | NumericFilter | LiteralFilter;
	public StaticBindingRuleElements getStaticBindingRuleAccess() {
		return (pStaticBindingRule != null) ? pStaticBindingRule : (pStaticBindingRule = new StaticBindingRuleElements());
	}
	
	public ParserRule getStaticBindingRuleRule() {
		return getStaticBindingRuleAccess().getRule();
	}

	//RangeFilter:
	//
	//	neg=NegationOpartor? "in" range=Range;
	public RangeFilterElements getRangeFilterAccess() {
		return (pRangeFilter != null) ? pRangeFilter : (pRangeFilter = new RangeFilterElements());
	}
	
	public ParserRule getRangeFilterRule() {
		return getRangeFilterAccess().getRule();
	}

	//Range:
	//
	//	OpenOpen | OpenClosed | ClosedClosed | ClosedOpen;
	public RangeElements getRangeAccess() {
		return (pRange != null) ? pRange : (pRange = new RangeElements());
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//OpenOpen:
	//
	//	"(" lowerBound=DOUBLE ", " upperBound=DOUBLE ")";
	public OpenOpenElements getOpenOpenAccess() {
		return (pOpenOpen != null) ? pOpenOpen : (pOpenOpen = new OpenOpenElements());
	}
	
	public ParserRule getOpenOpenRule() {
		return getOpenOpenAccess().getRule();
	}

	//OpenClosed:
	//
	//	"(" lowerBound=DOUBLE ", " upperBound=DOUBLE "]";
	public OpenClosedElements getOpenClosedAccess() {
		return (pOpenClosed != null) ? pOpenClosed : (pOpenClosed = new OpenClosedElements());
	}
	
	public ParserRule getOpenClosedRule() {
		return getOpenClosedAccess().getRule();
	}

	//ClosedClosed:
	//
	//	"[" lowerBound=DOUBLE ", " upperBound=DOUBLE ")";
	public ClosedClosedElements getClosedClosedAccess() {
		return (pClosedClosed != null) ? pClosedClosed : (pClosedClosed = new ClosedClosedElements());
	}
	
	public ParserRule getClosedClosedRule() {
		return getClosedClosedAccess().getRule();
	}

	//ClosedOpen:
	//
	//	"[" lowerBound=DOUBLE ", " upperBound=DOUBLE "]";
	public ClosedOpenElements getClosedOpenAccess() {
		return (pClosedOpen != null) ? pClosedOpen : (pClosedOpen = new ClosedOpenElements());
	}
	
	public ParserRule getClosedOpenRule() {
		return getClosedOpenAccess().getRule();
	}

	//NumericFilter:
	//
	//	operator=NumericOperator value=DOUBLE;
	public NumericFilterElements getNumericFilterAccess() {
		return (pNumericFilter != null) ? pNumericFilter : (pNumericFilter = new NumericFilterElements());
	}
	
	public ParserRule getNumericFilterRule() {
		return getNumericFilterAccess().getRule();
	}

	//NumericOperator:
	//
	//	"<" | "=<" | "==" | "!=" | ">=" | ">";
	public NumericOperatorElements getNumericOperatorAccess() {
		return (pNumericOperator != null) ? pNumericOperator : (pNumericOperator = new NumericOperatorElements());
	}
	
	public ParserRule getNumericOperatorRule() {
		return getNumericOperatorAccess().getRule();
	}

	//LiteralFilter:
	//
	//	neg=NegationOpartor? operator=LiteralOperator value=STRING;
	public LiteralFilterElements getLiteralFilterAccess() {
		return (pLiteralFilter != null) ? pLiteralFilter : (pLiteralFilter = new LiteralFilterElements());
	}
	
	public ParserRule getLiteralFilterRule() {
		return getLiteralFilterAccess().getRule();
	}

	//LiteralOperator:
	//
	//	"contains" | "startsWith" | "endsWith";
	public LiteralOperatorElements getLiteralOperatorAccess() {
		return (pLiteralOperator != null) ? pLiteralOperator : (pLiteralOperator = new LiteralOperatorElements());
	}
	
	public ParserRule getLiteralOperatorRule() {
		return getLiteralOperatorAccess().getRule();
	}

	//NegationOpartor:
	//
	//	"not";
	public NegationOpartorElements getNegationOpartorAccess() {
		return (pNegationOpartor != null) ? pNegationOpartor : (pNegationOpartor = new NegationOpartorElements());
	}
	
	public ParserRule getNegationOpartorRule() {
		return getNegationOpartorAccess().getRule();
	}

	/// *******************************************STATIC BINDING ELEMENTS******************************************* /
	//
	/// *******************************************STRUCTURAL/INTEGRATION FEATURES******************************************* /
	//
	//Source:
	//
	//	"Source" name=ID "{" ("register" adapter+=Adapter)+ "}";
	public SourceElements getSourceAccess() {
		return (pSource != null) ? pSource : (pSource = new SourceElements());
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}

	/// *******************************************STRUCTURAL/INTEGRATION FEATURES******************************************* /
	//
	//Adapter:
	//
	//	name=QualifiedName;
	public AdapterElements getAdapterAccess() {
		return (pAdapter != null) ? pAdapter : (pAdapter = new AdapterElements());
	}
	
	public ParserRule getAdapterRule() {
		return getAdapterAccess().getRule();
	}

	//XExpression:
	//
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
	//
	//	")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression |
	//
	//	XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression |
	//
	//	XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//
	//StaticQualifier:
	//
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
