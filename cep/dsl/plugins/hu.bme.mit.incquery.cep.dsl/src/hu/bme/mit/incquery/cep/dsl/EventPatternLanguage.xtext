grammar hu.bme.mit.incquery.cep.dsl.EventPatternLanguage with org.eclipse.xtext.xbase.Xbase // with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/incquery/patternlanguage/PatternLanguage" as iqpl
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate eventPatternLanguage "http://www.bme.hu/mit/incquery/cep/dsl/EventPatternLanguage"

EventModel:
	packagedModel=PackagedModel
;

PackagedModel:
	'package' name=QualifiedName
	usages+=Usage*
	modelElements+=ModelElement*	
;

DOUBLE returns ecore::EDouble:
	('-')? INT('.' INT)?;

Usage:
	'uses' importedNamespace=QualifiedNameWithWildcard;

ModelElement:
	EventPattern | Rule | Source
;



/*******************************************MAIN MODEL ELEMENTS*******************************************/

EventPattern:
	AbstractAtomicEventPattern | ComplexEventPattern
;

AbstractAtomicEventPattern:
	AtomicEventPattern | IQPatternEventPattern
;
	
AtomicEventPattern:
	'AtomicEvent' name=ID '('parameters=TypedParameterList?')' '{'
		('source' ':' source=[Source])?
//		('staticBinding' '{'
//			staticBindings += StaticBinding*
//		'}')?
		('staticBindings' staticBindings = XBlockExpression)?
	'}'
;
	
IQPatternEventPattern:
	'IQPatternEvent' name=ID '('parameters=TypedParameterList?')' '{'
		'iqPatternRef' ':' iqPatternRef=ParametrizedIncQueryPatternReference
		'iqChangeType' ':' iqChangeType=IQPatternChangeType
	'}'
;

ComplexEventPattern:
	'ComplexEvent' name=ID '('parameters=EventPatternParameterList?')' '{'
		('priority'':' priority=INT)?
		('definition'':'complexEventExpressions=ComplexEventExpression)?
	'}'
;

Rule:
	OnAppearRule | FailDiagnosticRule
;

OnAppearRule:
	'RuleOnAppear' name=ID '{'
		'events' ':' eventPatterns+=[EventPattern] (', 'eventPatterns+=[EventPattern])*
		'action' action = XBlockExpression
	'}'
;

FailDiagnosticRule:
	'RuleOnFail' name=ID '{'
		'events' ':' eventPatterns+=[EventPattern] (', 'eventPatterns+=[EventPattern])*
		'action' action = XBlockExpression
	'}'
;
/*******************************************BASIC EVENT TYPE ELEMENTS*******************************************/
	
	
	
/*******************************************IQ PATTERN ELEMENTS*******************************************/
enum IQPatternChangeType:
	NEW_MATCH_FOUND | EXISTING_MATCH_LOST 
;
/*******************************************IQ PATTERN ELEMENTS*******************************************/



/*******************************************FUNCTION ARGUMENT PARAMETERS*******************************************/
TypedParameterList:
	{TypedParameterList}
	parameters+=TypedParameter (', ' parameters+=TypedParameter)*
;

TypedParameter:
	{TypedParameter}
	name=ID ':' type = JvmTypeReference
;

EventPatternParameterList:
	{EventPatternParameterList}
	parameters+=EventTypedParameter (', ' parameters+=EventTypedParameter)*
;

EventTypedParameter:
	{EventTypedParameter}
	name=ID ':' type=[EventPattern]
;
/*******************************************FUNCTION ARGUMEN PARAMETERS*******************************************/

/*******************************************INCQUERY INTEGRATION*******************************************/
ParametrizedIncQueryPatternReference:
	iqpattern=[iqpl::Pattern]('('parameterList=PatternCallParameterList?')')?
;
/*******************************************INCQUERY INTEGRATION*******************************************/

/*******************************************COMPLEX EVENT EXPRESSIONS*******************************************/
Multiplicity:
	'{'multiplicity=INT'}'
;

Timewindow:
	'['length=INT']'
;

EventTypedParameterWithMultiplicity:
	eventPattern=[EventTypedParameter]('('parameterList=PatternCallParameterList?')')? (multiplicity=Multiplicity)?
;

PatternCallParameterList:
	{PatternCallParameterList}
	parameters+=PatternCallParameter (', ' parameters+=PatternCallParameter)*
;	

PatternCallParameter:
	{PatternCallParameter}
	name=ID
;

ComplexEventExpression:
	Expression | AugmentedExpression
;

AugmentedExpression:
	TimedExpression | MultiplicityExpression | TimedMultiplicityExpression
;

TimedExpression:
	'('expression=Expression')' timewindow=Timewindow
;

MultiplicityExpression:
	'('expression=Expression')' multiplicity=Multiplicity
;

TimedMultiplicityExpression:
	'('expression=Expression')' multiplicity=Multiplicity timewindow=Timewindow
;

Expression:
	FollowsExpression | BranchExpression
;

FollowsExpression:
	{FollowsExpression}
	eventPatterns+=EventTypedParameterWithMultiplicity (followerExpressions+=FollowerExpression)+
;

FollowerExpression:
	followsOperator=FollowsOperator eventPattern=FollowerEventStructure
;

FollowerEventStructure:
        InnerBranchExpression | EventTypedParameterWithMultiplicity
;

InnerBranchExpression:
	'('expression=BranchExpression')'
;

BranchExpression:
	{BranchExpression}
	eventPatterns+=EventTypedParameterWithMultiplicity ('OR' eventPatterns+=EventTypedParameterWithMultiplicity)+
;

FollowsOperator:
        FollowsOperatorNoTW | FollowsOperatorViaTW
;

FollowsOperatorNoTW:
        {FollowsOperatorNoTW}
        '->'
;

FollowsOperatorViaTW:
        '-[' timewindow=INT ']->'
;



/*******************************************COMPLEX EVENT EXPRESSIONS*******************************************/

/*******************************************STATIC BINDING ELEMENTS*******************************************/
StaticBinding:
	parameter=[TypedParameter] bindingRule=StaticBindingRule
;

StaticBindingRule:
	RangeFilter | NumericFilter | LiteralFilter
;

RangeFilter:
	(neg=NegationOpartor)? "in" range=Range
;

Range:
	OpenOpen | OpenClosed | ClosedClosed | ClosedOpen
;

OpenOpen:
	'(' lowerBound=DOUBLE ', ' upperBound=DOUBLE ')'
;

OpenClosed:
	'(' lowerBound=DOUBLE ', ' upperBound=DOUBLE ']'
;

ClosedClosed:
	'[' lowerBound=DOUBLE ', ' upperBound=DOUBLE ')'
;

ClosedOpen:
	'[' lowerBound=DOUBLE ', ' upperBound=DOUBLE ']';

NumericFilter:
	operator=NumericOperator value=DOUBLE
;

NumericOperator:
	'<' | '=<' | '==' | '!=' | '>=' | '>'
;

LiteralFilter:
	(neg=NegationOpartor)? operator=LiteralOperator value=STRING
;

LiteralOperator:
	'contains' | 'startsWith' | 'endsWith'
;

NegationOpartor:
	'not'
;
/*******************************************STATIC BINDING ELEMENTS*******************************************/


/*******************************************STRUCTURAL/INTEGRATION FEATURES*******************************************/
Source:
	'Source' name=ID '{'
		('register' adapter+=Adapter)+
	'}'
;

Adapter:
	name=QualifiedName
;
/*******************************************STRUCTURAL/INTEGRATION FEATURES*******************************************/