/*
* generated by Xtext
*/
grammar InternalSrct;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package hu.bme.mit.incquery.srct.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.mit.incquery.srct.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import hu.bme.mit.incquery.srct.services.SrctGrammarAccess;

}

@parser::members {
 
 	private SrctGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SrctGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration 
:
{ before(grammarAccess.getPackageDeclarationRule()); }
	 rulePackageDeclaration
{ after(grammarAccess.getPackageDeclarationRule()); } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageDeclarationAccess().getGroup()); }
(rule__PackageDeclaration__Group__0)
{ after(grammarAccess.getPackageDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSourceModel
entryRuleSourceModel 
:
{ before(grammarAccess.getSourceModelRule()); }
	 ruleSourceModel
{ after(grammarAccess.getSourceModelRule()); } 
	 EOF 
;

// Rule SourceModel
ruleSourceModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSourceModelAccess().getGroup()); }
(rule__SourceModel__Group__0)
{ after(grammarAccess.getSourceModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSource
entryRuleSource 
:
{ before(grammarAccess.getSourceRule()); }
	 ruleSource
{ after(grammarAccess.getSourceRule()); } 
	 EOF 
;

// Rule Source
ruleSource
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSourceAccess().getGroup()); }
(rule__Source__Group__0)
{ after(grammarAccess.getSourceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdapter
entryRuleAdapter 
:
{ before(grammarAccess.getAdapterRule()); }
	 ruleAdapter
{ after(grammarAccess.getAdapterRule()); } 
	 EOF 
;

// Rule Adapter
ruleAdapter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdapterAccess().getNameAssignment()); }
(rule__Adapter__NameAssignment)
{ after(grammarAccess.getAdapterAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PackageDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__0__Impl
	rule__PackageDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__1__Impl
	rule__PackageDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
(rule__PackageDeclaration__NameAssignment_1)
{ after(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getSourceModelAssignment_2()); }
(rule__PackageDeclaration__SourceModelAssignment_2)
{ after(grammarAccess.getPackageDeclarationAccess().getSourceModelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SourceModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModel__Group__0__Impl
	rule__SourceModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelAccess().getSourceModelAction_0()); }
(

)
{ after(grammarAccess.getSourceModelAccess().getSourceModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelAccess().getSourcesAssignment_1()); }
(rule__SourceModel__SourcesAssignment_1)*
{ after(grammarAccess.getSourceModelAccess().getSourcesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Source__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Source__Group__0__Impl
	rule__Source__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Source__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getSourceKeyword_0()); }

	'source' 

{ after(grammarAccess.getSourceAccess().getSourceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Source__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Source__Group__1__Impl
	rule__Source__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Source__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getNameAssignment_1()); }
(rule__Source__NameAssignment_1)
{ after(grammarAccess.getSourceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Source__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Source__Group__2__Impl
	rule__Source__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Source__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getSourceAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Source__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Source__Group__3__Impl
	rule__Source__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Source__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSourceAccess().getGroup_3()); }
(rule__Source__Group_3__0)
{ after(grammarAccess.getSourceAccess().getGroup_3()); }
)
(
{ before(grammarAccess.getSourceAccess().getGroup_3()); }
(rule__Source__Group_3__0)*
{ after(grammarAccess.getSourceAccess().getGroup_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Source__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Source__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Source__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getSourceAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Source__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Source__Group_3__0__Impl
	rule__Source__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Source__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getRegisterKeyword_3_0()); }

	'register' 

{ after(grammarAccess.getSourceAccess().getRegisterKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Source__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Source__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Source__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getAdapterAssignment_3_1()); }
(rule__Source__AdapterAssignment_3_1)
{ after(grammarAccess.getSourceAccess().getAdapterAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__PackageDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__SourceModelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getSourceModelSourceModelParserRuleCall_2_0()); }
	ruleSourceModel{ after(grammarAccess.getPackageDeclarationAccess().getSourceModelSourceModelParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceModel__SourcesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceModelAccess().getSourcesSourceParserRuleCall_1_0()); }
	ruleSource{ after(grammarAccess.getSourceModelAccess().getSourcesSourceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Source__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSourceAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Source__AdapterAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAccess().getAdapterAdapterParserRuleCall_3_1_0()); }
	ruleAdapter{ after(grammarAccess.getSourceAccess().getAdapterAdapterParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Adapter__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdapterAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getAdapterAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


